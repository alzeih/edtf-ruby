#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'strscan'

module EDTF
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 443)

  @defaults = {
    :level => 2,
    :debug => false
  }.freeze

  class << self; attr_reader :defaults; end

  attr_reader :options

  def initialize(options = {})
    @options = Parser.defaults.merge(options)
  end

  def debug?
    !!(options[:debug] || ENV['DEBUG'])
  end

  def parse(input)
    parse!(input)
  rescue => e
    warn e.message if debug?
    nil
  end

  def parse!(input)
    @yydebug = debug?
    @src = StringScanner.new(input)
    do_parse
  end

  def on_error(tid, value, stack)
    raise ArgumentError,
      "failed to parse date: unexpected '#{value}' at #{stack.inspect}"
  end

  def apply_uncertainty(date, uncertainty, scope = nil)
    uncertainty.each do |u|
      scope.nil? ? date.send(u) : date.send(u, scope)
    end
    date
  end

  alias uoa apply_uncertainty

  def next_token
    case
    when @src.eos?
      nil
    # when @src.scan(/\s+/)
      # ignore whitespace
    when @src.scan(/\(/)
      ['(', @src.matched]
    when @src.scan(/\)/)
      [')', @src.matched]
    when @src.scan(/\[/)
      ['[', @src.matched]
    when @src.scan(/\]/)
      [']', @src.matched]
    when @src.scan(/\{/)
      ['{', @src.matched]
    when @src.scan(/\}/)
      ['}', @src.matched]
    when @src.scan(/T/)
      [:T, @src.matched]
    when @src.scan(/Z/)
      [:Z, @src.matched]
    when @src.scan(/\%/)
      [:UA, [:uncertain!, :approximate!]]
    when @src.scan(/\?/)
      [:UA, [:uncertain!]]
    when @src.scan(/~/)
      [:UA, [:approximate!]]
    when @src.scan(/open/i)
      [:OPEN, :open]
    when @src.scan(/unkn?own/i) # matches 'unkown' typo too
      [:UNKNOWN, :unknown]
    when @src.scan(/u/)
      [:U, @src.matched]
    when @src.scan(/x/i)
      [:X, @src.matched]
    when @src.scan(/y/)
      [:LONGYEAR, @src.matched]
    when @src.scan(/e/)
      [:E, @src.matched]
    when @src.scan(/\+/)
      ['+', @src.matched]
    when @src.scan(/-\(/)
      ['-(', @src.matched]
    when @src.scan(/-/)
      ['-', @src.matched]
    when @src.scan(/:/)
      [':', @src.matched]
    when @src.scan(/\//)
      ['/', @src.matched]
    when @src.scan(/\s*\.\.\s*/)
      [:DOTS, '..']
    when @src.scan(/\s*,\s*/)
      [',', ',']
    when @src.scan(/\^\w+/)
      ['^', @src.matched[1..-1]]
    when @src.scan(/\d/)
      [@src.matched, @src.matched.to_i]
    else @src.scan(/./)
      [:UNMATCHED, @src.rest]
    end
  end


# -*- racc -*-
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   123,   122,    53,    56,    52,    57,   -53,   144,   154,    55,
    44,    46,    41,   108,    57,    43,   109,    45,    62,   199,
   198,   -51,   160,    54,    47,    48,    49,    50,    51,    44,
    46,    41,    63,    64,    43,    56,    45,   161,   162,   128,
    65,   206,    66,    47,    48,    49,    50,    51,    18,    27,
   108,    28,   108,   109,    40,   109,   -68,    44,    46,    41,
    11,   -69,    43,    87,    45,    88,    35,   122,    36,    92,
   126,    47,    48,    49,    50,    51,    44,    46,    41,   156,
   141,    43,   115,    45,   114,   194,   198,   100,   195,   118,
    47,    48,    49,    50,    51,    44,    46,    41,   245,   145,
    43,   115,    45,   114,   108,   146,   100,   109,   118,    47,
    48,    49,    50,    51,    27,   136,    97,   249,    99,    40,
   147,   100,    44,    46,    41,    11,   115,    43,   114,    45,
   184,   100,   182,   118,   148,   183,    47,    48,    49,    50,
    51,    85,    40,   210,   152,    44,    46,    41,    11,   107,
    43,   115,    45,   114,   108,   158,   100,   109,   118,    47,
    48,    49,    50,    51,    85,    40,   104,   163,    44,    46,
    41,    11,   107,    43,   115,    45,   114,   108,   172,   100,
   109,   118,    47,    48,    49,    50,    51,    40,   173,   175,
    44,    46,    41,    11,   115,    43,   114,    45,   185,   100,
   230,   118,   186,   229,    47,    48,    49,    50,    51,    40,
   200,   201,    44,    46,    41,    11,   203,    43,   234,    45,
   108,   229,   204,   109,   205,   207,    47,    48,    49,    50,
    51,    40,   220,   221,    44,    46,    41,    11,   175,    43,
   175,    45,   243,   244,   247,   250,   253,   220,    47,    48,
    49,    50,    51,    44,    46,    41,   143,    56,    43,   221,
    45,   254,   257,   142,   258,   259,   264,    47,    48,    49,
    50,    51,    44,    46,    41,   177,   179,    43,   269,    45,
   176,   175,   178,   273,   277,   280,    47,    48,    49,    50,
    51,    44,    46,   281,    68,   282,    43,   285,    45,   286,
   287,   270,   288,   291,   292,    47,    48,    49,    50,    51,
    44,    46,    41,    89,   294,    43,   295,    45,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,    41,   nil,   nil,    43,   nil,    45,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,    46,
   nil,   nil,   nil,    43,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    48,    49,    50,    51,    44,    46,    41,
   nil,   nil,    43,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    48,    49,    50,    51,    44,    46,   nil,   nil,
   nil,    43,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    48,    49,    50,    51,    44,    46,    41,   nil,   nil,
    43,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    48,    49,    50,    51,    44,    46,    41,    89,   nil,    43,
   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,
    49,    50,    51,    44,    46,    41,   nil,   nil,    43,   nil,
    45,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,    49,
    50,    51,    44,    46,    41,   nil,   nil,    43,   nil,    45,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,    49,    50,
    51,    44,    46,   170,   nil,   nil,    43,   nil,    45,   nil,
   nil,   nil,   nil,   nil,   nil,    47,    48,    49,    50,    51,
    44,    46,    41,   nil,   nil,    43,   nil,    45,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,   nil,   nil,   nil,    43,   nil,    45,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,    46,
   nil,   nil,   nil,    43,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    48,    49,    50,    51,   167,   188,   165,
   nil,   nil,   166,   nil,   168,   nil,   nil,   nil,   nil,   nil,
   nil,   189,   190,   191,   192,   193,    44,    46,    41,   nil,
   nil,    43,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    48,    49,    50,    51,    44,    46,    41,   nil,   nil,
    43,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    48,    49,    50,    51,    44,    46,    41,   nil,   nil,    43,
   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,
    49,    50,    51,    44,    46,   nil,   nil,   nil,    43,   nil,
    45,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,    49,
    50,    51,    44,    46,    41,    89,   nil,    43,   nil,    45,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,    49,    50,
    51,    44,    46,    41,    89,   nil,    43,   nil,    45,   nil,
   nil,   nil,   nil,   nil,   nil,    47,    48,    49,    50,    51,
    44,    46,    41,    89,   nil,    43,   nil,    45,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,    41,   nil,   nil,    43,   nil,    45,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,    46,
   nil,   nil,   nil,    43,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    48,    49,    50,    51,    44,    46,    41,
   nil,   nil,    43,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    48,    49,    50,    51,    44,    46,    41,   nil,
   nil,    43,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    48,    49,    50,    51,    44,    46,    41,   nil,   nil,
    43,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    48,    49,    50,    51,    44,    46,   262,   nil,   nil,    43,
   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,
    49,    50,    51,    44,    46,   263,   nil,   nil,    43,   nil,
    45,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,    49,
    50,    51,    44,    46,   265,   nil,   nil,    43,   nil,    45,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,    49,    50,
    51,    44,    46,    41,   nil,   nil,    43,   nil,    45,   nil,
   nil,   nil,   nil,   nil,   nil,    47,    48,    49,    50,    51,
    44,    46,    41,   nil,   nil,    43,   nil,    45,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,    41,   nil,   nil,    43,   nil,    45,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,    46,
    41,   nil,   nil,    43,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    48,    49,    50,    51,    44,    46,    41,
   nil,   nil,    43,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    48,    49,    50,    51,    44,    46,   293,   nil,
   nil,    43,   nil,    45,   nil,   nil,   nil,   nil,   270,   112,
    47,    48,    49,    50,    51,   113,   nil,   115,   115,   114,
   114,   275,   100,   100,   118,   118,   nil,   104,   nil,   nil,
   115,   nil,   114,   107,   nil,   100,   106,   118,   108,   nil,
   nil,   109,   115,   240,   237,   nil,   nil,   100,   nil,   239,
   115,   240,   237,   nil,   nil,   100,   241,   239,   115,   240,
   237,   nil,   nil,   100,   241,   239,   115,   240,   114,   nil,
   nil,   100,   241,   239,   115,   240,   290,   nil,   nil,   100,
   241,   239,   167,   164,   165,   nil,   nil,   166,   241,   168,
   184,   260,   182,   nil,   nil,   183,   nil,   261 ]

racc_action_check = [
    61,    61,     5,     7,     1,     8,    14,    72,    87,     7,
    61,    61,    61,    87,    72,    61,    87,    61,    16,   121,
   121,     5,    94,     5,    61,    61,    61,    61,    61,   121,
   121,   121,    17,    18,   121,   129,   121,    94,    94,    65,
    19,   129,    24,   121,   121,   121,   121,   121,     0,     0,
    65,     0,   107,    65,     0,   107,    25,     0,     0,     0,
     0,    26,     0,    37,     0,    38,     0,   120,     0,    52,
    64,     0,     0,     0,     0,     0,   120,   120,   120,    88,
    70,   120,    88,   120,    88,   118,   196,    88,   118,    88,
   120,   120,   120,   120,   120,   196,   196,   196,   180,    73,
   196,   180,   196,   180,   154,    75,   180,   154,   180,   196,
   196,   196,   196,   196,    66,    66,    53,   204,    53,    66,
    76,    53,    66,    66,    66,    66,   204,    66,   204,    66,
   109,   204,   109,   204,    77,   109,    66,    66,    66,    66,
    66,    35,    35,   142,    86,    35,    35,    35,    35,   142,
    35,   113,    35,   113,   142,    91,   113,   142,   113,    35,
    35,    35,    35,    35,    36,    36,   206,    95,    36,    36,
    36,    36,   206,    36,   156,    36,   156,   206,   103,   156,
   206,   156,    36,    36,    36,    36,    36,   147,   104,   105,
   147,   147,   147,   147,   221,   147,   221,   147,   111,   221,
   161,   221,   112,   161,   147,   147,   147,   147,   147,   148,
   122,   123,   148,   148,   148,   148,   126,   148,   162,   148,
   220,   162,   127,   220,   128,   139,   148,   148,   148,   148,
   148,   254,   149,   150,   254,   254,   254,   254,   153,   254,
   155,   254,   164,   173,   187,   205,   210,   212,   254,   254,
   254,   254,   254,    11,    11,    11,    71,    71,    11,   214,
    11,   216,   223,    71,   225,   228,   235,    11,    11,    11,
    11,    11,    12,    12,    12,   106,   106,    12,   243,    12,
   106,   246,   106,   249,   253,   260,    12,    12,    12,    12,
    12,    28,    28,   262,    28,   263,    28,   269,    28,   270,
   275,   277,   280,   285,   288,    28,    28,    28,    28,    28,
    40,    40,    40,    40,   291,    40,   294,    40,   nil,   nil,
   nil,   nil,   nil,   nil,    40,    40,    40,    40,    40,    59,
    59,    59,   nil,   nil,    59,   nil,    59,   nil,   nil,   nil,
   nil,   nil,   nil,    59,    59,    59,    59,    59,    62,    62,
   nil,   nil,   nil,    62,   nil,    62,   nil,   nil,   nil,   nil,
   nil,   nil,    62,    62,    62,    62,    62,    67,    67,    67,
   nil,   nil,    67,   nil,    67,   nil,   nil,   nil,   nil,   nil,
   nil,    67,    67,    67,    67,    67,    68,    68,   nil,   nil,
   nil,    68,   nil,    68,   nil,   nil,   nil,   nil,   nil,   nil,
    68,    68,    68,    68,    68,    69,    69,    69,   nil,   nil,
    69,   nil,    69,   nil,   nil,   nil,   nil,   nil,   nil,    69,
    69,    69,    69,    69,    85,    85,    85,    85,   nil,    85,
   nil,    85,   nil,   nil,   nil,   nil,   nil,   nil,    85,    85,
    85,    85,    85,    89,    89,    89,   nil,   nil,    89,   nil,
    89,   nil,   nil,   nil,   nil,   nil,   nil,    89,    89,    89,
    89,    89,    90,    90,    90,   nil,   nil,    90,   nil,    90,
   nil,   nil,   nil,   nil,   nil,   nil,    90,    90,    90,    90,
    90,    99,    99,    99,   nil,   nil,    99,   nil,    99,   nil,
   nil,   nil,   nil,   nil,   nil,    99,    99,    99,    99,    99,
   100,   100,   100,   nil,   nil,   100,   nil,   100,   nil,   nil,
   nil,   nil,   nil,   nil,   100,   100,   100,   100,   100,   108,
   108,   nil,   nil,   nil,   108,   nil,   108,   nil,   nil,   nil,
   nil,   nil,   nil,   108,   108,   108,   108,   108,   114,   114,
   nil,   nil,   nil,   114,   nil,   114,   nil,   nil,   nil,   nil,
   nil,   nil,   114,   114,   114,   114,   114,   115,   115,   115,
   nil,   nil,   115,   nil,   115,   nil,   nil,   nil,   nil,   nil,
   nil,   115,   115,   115,   115,   115,   124,   124,   124,   nil,
   nil,   124,   nil,   124,   nil,   nil,   nil,   nil,   nil,   nil,
   124,   124,   124,   124,   124,   138,   138,   138,   nil,   nil,
   138,   nil,   138,   nil,   nil,   nil,   nil,   nil,   nil,   138,
   138,   138,   138,   138,   140,   140,   140,   nil,   nil,   140,
   nil,   140,   nil,   nil,   nil,   nil,   nil,   nil,   140,   140,
   140,   140,   140,   141,   141,   nil,   nil,   nil,   141,   nil,
   141,   nil,   nil,   nil,   nil,   nil,   nil,   141,   141,   141,
   141,   141,   143,   143,   143,   143,   nil,   143,   nil,   143,
   nil,   nil,   nil,   nil,   nil,   nil,   143,   143,   143,   143,
   143,   144,   144,   144,   144,   nil,   144,   nil,   144,   nil,
   nil,   nil,   nil,   nil,   nil,   144,   144,   144,   144,   144,
   145,   145,   145,   145,   nil,   145,   nil,   145,   nil,   nil,
   nil,   nil,   nil,   nil,   145,   145,   145,   145,   145,   157,
   157,   157,   nil,   nil,   157,   nil,   157,   nil,   nil,   nil,
   nil,   nil,   nil,   157,   157,   157,   157,   157,   207,   207,
   nil,   nil,   nil,   207,   nil,   207,   nil,   nil,   nil,   nil,
   nil,   nil,   207,   207,   207,   207,   207,   208,   208,   208,
   nil,   nil,   208,   nil,   208,   nil,   nil,   nil,   nil,   nil,
   nil,   208,   208,   208,   208,   208,   209,   209,   209,   nil,
   nil,   209,   nil,   209,   nil,   nil,   nil,   nil,   nil,   nil,
   209,   209,   209,   209,   209,   226,   226,   226,   nil,   nil,
   226,   nil,   226,   nil,   nil,   nil,   nil,   nil,   nil,   226,
   226,   226,   226,   226,   230,   230,   230,   nil,   nil,   230,
   nil,   230,   nil,   nil,   nil,   nil,   nil,   nil,   230,   230,
   230,   230,   230,   234,   234,   234,   nil,   nil,   234,   nil,
   234,   nil,   nil,   nil,   nil,   nil,   nil,   234,   234,   234,
   234,   234,   237,   237,   237,   nil,   nil,   237,   nil,   237,
   nil,   nil,   nil,   nil,   nil,   nil,   237,   237,   237,   237,
   237,   239,   239,   239,   nil,   nil,   239,   nil,   239,   nil,
   nil,   nil,   nil,   nil,   nil,   239,   239,   239,   239,   239,
   240,   240,   240,   nil,   nil,   240,   nil,   240,   nil,   nil,
   nil,   nil,   nil,   nil,   240,   240,   240,   240,   240,   241,
   241,   241,   nil,   nil,   241,   nil,   241,   nil,   nil,   nil,
   nil,   nil,   nil,   241,   241,   241,   241,   241,   251,   251,
   251,   nil,   nil,   251,   nil,   251,   nil,   nil,   nil,   nil,
   nil,   nil,   251,   251,   251,   251,   251,   252,   252,   252,
   nil,   nil,   252,   nil,   252,   nil,   nil,   nil,   nil,   nil,
   nil,   252,   252,   252,   252,   252,   290,   290,   290,   nil,
   nil,   290,   nil,   290,   nil,   nil,   nil,   nil,   244,    57,
   290,   290,   290,   290,   290,    57,   nil,   244,    57,   244,
    57,   250,   244,    57,   244,    57,   nil,    55,   nil,   nil,
   250,   nil,   250,    55,   nil,   250,    55,   250,    55,   nil,
   nil,    55,   163,   163,   163,   nil,   nil,   163,   nil,   163,
   259,   259,   259,   nil,   nil,   259,   163,   259,   264,   264,
   264,   nil,   nil,   264,   259,   264,   281,   281,   281,   nil,
   nil,   281,   264,   281,   282,   282,   282,   nil,   nil,   282,
   281,   282,    97,    97,    97,   nil,   nil,    97,   282,    97,
   229,   229,   229,   nil,   nil,   229,   nil,   229 ]

racc_action_pointer = [
    42,     4,   nil,   nil,   nil,     0,   nil,    -9,   -13,   nil,
   nil,   238,   257,   nil,   -15,   nil,    14,     9,    27,    22,
   nil,   nil,   nil,   nil,    21,    56,    61,   nil,   276,   nil,
   nil,   nil,   nil,   nil,   nil,   130,   153,    45,    47,   nil,
   295,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    69,   101,   nil,   981,   nil,   963,   nil,   314,
   nil,    -5,   333,   nil,    64,    33,   107,   352,   371,   390,
    76,   245,    -4,    88,   nil,    80,    92,   106,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   409,   117,    -4,    67,   428,
   447,   143,   nil,   nil,    19,   153,   nil,  1027,   nil,   466,
   485,   nil,   nil,   166,   182,   177,   260,    35,   504,   115,
   nil,   186,   196,   136,   523,   542,   nil,   nil,    68,   nil,
    61,    14,   204,   206,   561,   nil,   210,   204,   218,    23,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   580,   221,
   599,   618,   137,   637,   656,   675,   nil,   175,   197,   214,
   215,   nil,   nil,   226,    87,   228,   159,   694,   nil,   nil,
   nil,   183,   201,   987,   228,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   225,   nil,   nil,   nil,   nil,   nil,   nil,
    86,   nil,   nil,   nil,   nil,   nil,   nil,   232,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    80,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   111,   227,   160,   713,   732,   751,
   240,   nil,   229,   nil,   241,   nil,   233,   nil,   nil,   nil,
   203,   179,   nil,   250,   nil,   252,   770,   nil,   251,  1035,
   789,   nil,   nil,   nil,   808,   252,   nil,   827,   nil,   846,
   865,   884,   nil,   261,   962,   nil,   269,   nil,   nil,   277,
   975,   903,   922,   266,   219,   nil,   nil,   nil,   nil,   995,
   271,   nil,   279,   281,  1003,   nil,   nil,   nil,   nil,   280,
   293,   nil,   nil,   nil,   nil,   294,   nil,   295,   nil,   nil,
   285,  1011,  1019,   nil,   nil,   289,   nil,   nil,   287,   nil,
   941,   297,   nil,   nil,   299,   nil ]

racc_action_default = [
  -180,  -180,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
   -23,  -180,  -180,   -33,   -34,   -35,   -36,   -37,  -180,   -39,
   -40,   -41,   -42,   -43,  -180,   -52,   -54,   -55,  -180,   -67,
   -70,   -71,   -72,   -73,   -74,  -180,  -180,  -111,  -112,  -113,
  -180,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,
  -141,  -142,  -180,  -180,   -79,  -180,  -115,  -180,   -24,  -180,
   -44,  -180,  -180,   -75,  -180,  -180,  -180,   -58,  -180,  -174,
  -180,    -6,    -7,    -8,   -39,  -180,   -84,   -89,   -90,   -91,
   -93,   -94,   -95,   -96,   -97,  -180,  -180,  -180,  -180,  -180,
  -180,  -114,   296,    -9,   -10,  -180,   -13,  -180,   -30,  -180,
  -180,  -156,   -26,   -28,  -180,  -130,  -180,  -180,  -180,  -180,
   -27,   -29,  -180,  -180,  -180,  -180,  -157,  -164,  -180,  -166,
  -180,  -180,  -180,  -180,   -76,  -178,  -180,  -106,  -180,    -6,
   -50,   -51,   -52,   -53,   -54,   -56,   -57,   -61,   -59,  -180,
  -175,  -180,  -180,  -101,  -100,   -99,   -82,  -180,  -180,    -6,
    -7,   -98,   -83,  -130,  -180,  -130,  -180,  -180,  -116,   -11,
   -15,  -180,  -180,  -180,  -180,  -151,  -152,  -153,  -154,  -149,
  -155,  -150,  -118,   -47,   -62,  -131,   -63,   -64,   -65,   -66,
  -119,  -143,  -144,  -145,  -146,  -127,   -48,  -128,  -158,  -159,
  -160,  -161,  -162,  -163,  -165,  -167,  -180,   -25,   -45,   -80,
   -46,   -81,  -179,   -38,  -180,  -180,  -180,  -180,  -176,   -77,
  -180,  -104,  -180,  -103,  -180,  -102,   -86,   -87,   -88,   -92,
  -180,  -180,  -117,  -121,  -123,  -124,  -180,   -16,  -180,  -180,
  -180,  -147,   -17,   -18,  -180,  -180,   -31,  -180,  -168,  -180,
  -180,  -180,  -173,  -180,  -180,  -120,  -130,  -129,  -105,  -180,
  -180,   -78,  -177,   -47,  -180,   -28,   -29,  -122,  -125,  -180,
  -180,  -148,  -180,  -180,  -180,  -172,  -169,  -170,  -171,  -180,
  -180,  -110,  -126,  -109,  -107,  -180,   -60,  -180,   -85,   -20,
  -180,  -180,  -180,   -12,   -32,  -180,   -49,  -108,  -180,   -22,
  -180,  -180,   -21,   -19,  -180,   -14 ]

racc_goto_table = [
    69,   219,   111,    12,   174,   124,   127,   217,   218,     7,
   238,     8,     9,   235,     1,    61,    14,     5,     2,    19,
    58,    24,     3,    25,    26,    67,    70,     4,   153,   227,
   233,   289,   289,   155,   125,   231,   231,    75,    86,     6,
    69,    93,    94,    90,   159,    95,   283,    96,   180,    91,
   232,    98,   222,   284,   224,    13,    15,    16,   187,    17,
    60,   130,   120,   105,   121,   138,   139,    29,    30,    31,
   137,   169,   140,    32,    33,   129,    34,     8,     9,   216,
   181,   101,   133,   131,   209,    19,   169,   135,    90,   132,
   134,   nil,    90,   157,   149,   223,   150,     9,    58,   nil,
   nil,   225,   151,   171,   nil,   nil,   238,   219,   nil,   279,
   nil,   238,   nil,   125,   278,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   196,   197,   246,   nil,   202,   238,   238,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   137,   nil,   208,   nil,   272,    90,    90,    90,   248,
   251,   nil,   211,   212,   212,   213,   214,   215,   nil,   nil,
   226,   255,   nil,   nil,   nil,   nil,   256,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   125,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   271,
   nil,   nil,   nil,   nil,   nil,   274,   nil,   nil,   nil,   197,
   nil,   nil,   181,   nil,   nil,   nil,   181,   nil,   nil,   169,
   nil,   252,   202,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   197,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   266,   267,   268,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   202,   276,   nil,   nil,   nil,   nil,
   nil,   nil,   169 ]

racc_goto_check = [
    44,    59,    25,    22,    46,    53,    23,    58,    58,     7,
    66,     8,     9,    14,     1,    22,    30,     5,     2,    34,
    21,    39,     3,    41,    42,    43,    54,     4,    23,    17,
    17,    20,    20,    25,    44,    24,    24,    55,    55,     6,
    44,    10,    11,    22,    12,    13,    15,    16,    23,     7,
    18,    27,    46,    28,    46,    29,    31,    32,    25,    33,
    38,    40,    22,    45,    22,    43,    54,    47,    48,    49,
    22,    44,    22,    50,    51,     7,    52,     8,     9,    57,
    44,    65,    30,     5,    53,    34,    44,    39,    22,    41,
    42,   nil,    22,    22,     7,    23,     8,     9,    21,   nil,
   nil,    25,     5,    22,   nil,   nil,    66,    59,   nil,    14,
   nil,    66,   nil,    44,    58,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    22,    22,    25,   nil,    22,    66,    66,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    22,   nil,    22,   nil,    46,    22,    22,    22,    25,
    53,   nil,     7,     7,     7,     8,     8,     9,   nil,   nil,
    22,    23,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,    22,
   nil,   nil,    44,   nil,   nil,   nil,    44,   nil,   nil,    44,
   nil,    22,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    22,    22,    22,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,    22,   nil,   nil,   nil,   nil,
   nil,   nil,    44 ]

racc_goto_pointer = [
   nil,    14,    18,    22,    27,    17,    39,     9,    11,    12,
   -12,   -11,   -50,    -8,  -150,  -218,    -6,  -132,  -112,   nil,
  -250,     9,     3,   -59,  -126,   -55,   nil,    -2,  -211,    55,
    16,    56,    57,    59,    19,   nil,   nil,   nil,    49,    21,
    -5,    23,    24,    -3,   -28,     8,  -101,    67,    68,    69,
    73,    74,    76,   -57,    -2,     2,   nil,   -68,  -140,  -147,
   nil,   nil,   nil,   nil,   nil,    28,  -153,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    82,   nil,    71,    72,    73,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   228,
   242,    10,    59,   103,   102,   nil,   110,   nil,   236,   nil,
    84,   nil,   nil,   nil,    74,    20,    21,    22,    23,   nil,
   nil,    83,   nil,   nil,    42,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    76,    77,    78,    79,
    80,    81,    37,    38,    39,   116,   117,   119 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 39, :_reduce_6,
  1, 39, :_reduce_7,
  1, 39, :_reduce_8,
  3, 40, :_reduce_9,
  1, 44, :_reduce_none,
  2, 44, :_reduce_11,
  5, 45, :_reduce_12,
  1, 45, :_reduce_none,
  8, 50, :_reduce_14,
  1, 46, :_reduce_15,
  2, 46, :_reduce_16,
  2, 46, :_reduce_17,
  1, 52, :_reduce_none,
  5, 52, :_reduce_19,
  3, 51, :_reduce_20,
  5, 51, :_reduce_21,
  4, 51, :_reduce_22,
  1, 41, :_reduce_none,
  2, 41, :_reduce_24,
  4, 55, :_reduce_25,
  1, 57, :_reduce_none,
  1, 59, :_reduce_none,
  3, 42, :_reduce_28,
  3, 43, :_reduce_29,
  1, 47, :_reduce_none,
  1, 48, :_reduce_none,
  1, 49, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  4, 63, :_reduce_38,
  1, 64, :_reduce_39,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 68, :_reduce_none,
  2, 68, :_reduce_44,
  4, 72, :_reduce_45,
  4, 72, :_reduce_46,
  4, 69, :_reduce_47,
  4, 70, :_reduce_48,
  7, 71, :_reduce_49,
  3, 65, :_reduce_50,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  2, 66, :_reduce_58,
  3, 66, :_reduce_59,
  5, 77, :_reduce_60,
  2, 77, :_reduce_61,
  4, 67, :_reduce_62,
  2, 79, :_reduce_63,
  2, 79, :_reduce_64,
  2, 79, :_reduce_65,
  2, 79, :_reduce_66,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  2, 81, :_reduce_75,
  3, 86, :_reduce_76,
  4, 86, :_reduce_77,
  5, 86, :_reduce_78,
  2, 85, :_reduce_79,
  4, 84, :_reduce_80,
  4, 84, :_reduce_81,
  3, 82, :_reduce_82,
  3, 83, :_reduce_83,
  1, 89, :_reduce_84,
  5, 89, :_reduce_85,
  3, 89, :_reduce_86,
  3, 89, :_reduce_87,
  3, 89, :_reduce_88,
  1, 89, :_reduce_89,
  1, 89, :_reduce_90,
  1, 91, :_reduce_91,
  3, 91, :_reduce_92,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  2, 90, :_reduce_98,
  2, 92, :_reduce_99,
  2, 92, :_reduce_100,
  2, 92, :_reduce_101,
  3, 95, :_reduce_102,
  3, 95, :_reduce_103,
  3, 95, :_reduce_104,
  5, 76, :_reduce_105,
  3, 76, :_reduce_106,
  6, 76, :_reduce_107,
  7, 76, :_reduce_108,
  6, 76, :_reduce_109,
  6, 76, :_reduce_110,
  1, 75, :_reduce_111,
  1, 75, :_reduce_112,
  1, 75, :_reduce_113,
  2, 96, :_reduce_114,
  2, 96, :_reduce_115,
  3, 96, :_reduce_116,
  4, 97, :_reduce_117,
  4, 97, :_reduce_118,
  4, 97, :_reduce_119,
  5, 97, :_reduce_120,
  4, 97, :_reduce_121,
  5, 97, :_reduce_122,
  4, 98, :_reduce_123,
  4, 98, :_reduce_124,
  5, 98, :_reduce_125,
  6, 98, :_reduce_126,
  4, 98, :_reduce_127,
  4, 98, :_reduce_128,
  5, 98, :_reduce_129,
  0, 80, :_reduce_130,
  1, 80, :_reduce_none,
  1, 56, :_reduce_132,
  1, 56, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  2, 58, :_reduce_143,
  2, 58, :_reduce_144,
  2, 58, :_reduce_145,
  2, 58, :_reduce_146,
  1, 53, :_reduce_none,
  2, 53, :_reduce_148,
  2, 99, :_reduce_149,
  2, 99, :_reduce_150,
  2, 99, :_reduce_151,
  2, 99, :_reduce_152,
  2, 99, :_reduce_153,
  2, 99, :_reduce_154,
  2, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 100, :_reduce_none,
  2, 100, :_reduce_158,
  2, 100, :_reduce_159,
  2, 100, :_reduce_160,
  2, 100, :_reduce_161,
  2, 100, :_reduce_162,
  2, 100, :_reduce_163,
  1, 101, :_reduce_none,
  2, 101, :_reduce_165,
  1, 60, :_reduce_none,
  2, 60, :_reduce_167,
  1, 54, :_reduce_none,
  2, 54, :_reduce_169,
  2, 54, :_reduce_170,
  2, 54, :_reduce_171,
  2, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 88, :_reduce_174,
  2, 88, :_reduce_175,
  3, 88, :_reduce_176,
  4, 88, :_reduce_177,
  1, 87, :_reduce_178,
  2, 87, :_reduce_179 ]

racc_reduce_n = 180

racc_shift_n = 296

racc_token_table = {
  false => 0,
  :error => 1,
  :T => 2,
  :Z => 3,
  :E => 4,
  :X => 5,
  :U => 6,
  :UNKNOWN => 7,
  :OPEN => 8,
  :LONGYEAR => 9,
  :UNMATCHED => 10,
  :DOTS => 11,
  :UA => 12,
  :PUA => 13,
  ":" => 14,
  "2" => 15,
  "4" => 16,
  "0" => 17,
  "-" => 18,
  "+" => 19,
  "1" => 20,
  "/" => 21,
  "3" => 22,
  "^" => 23,
  "[" => 24,
  "]" => 25,
  "{" => 26,
  "}" => 27,
  "," => 28,
  "5" => 29,
  "6" => 30,
  "7" => 31,
  "8" => 32,
  "9" => 33 }

racc_nt_base = 34

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T",
  "Z",
  "E",
  "X",
  "U",
  "UNKNOWN",
  "OPEN",
  "LONGYEAR",
  "UNMATCHED",
  "DOTS",
  "UA",
  "PUA",
  "\":\"",
  "\"2\"",
  "\"4\"",
  "\"0\"",
  "\"-\"",
  "\"+\"",
  "\"1\"",
  "\"/\"",
  "\"3\"",
  "\"^\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\"5\"",
  "\"6\"",
  "\"7\"",
  "\"8\"",
  "\"9\"",
  "$start",
  "edtf",
  "level_0_expression",
  "level_1_expression",
  "level_2_expression",
  "date",
  "date_time",
  "year",
  "year_month",
  "year_month_day",
  "time",
  "base_time",
  "zone_offset",
  "hour",
  "minute",
  "second",
  "midnight",
  "zone_offset_hour",
  "positive_zone_offset",
  "d01_13",
  "d01_59",
  "positive_year",
  "digit",
  "month",
  "d01_12",
  "day",
  "d01_31",
  "d00_23",
  "d00_59",
  "unknown",
  "unspecified",
  "level_1_interval",
  "long_year_simple",
  "season",
  "unspecified_year",
  "unspecified_month",
  "unspecified_day",
  "unspecified_day_and_month",
  "positive_unspecified_year",
  "level_1_start",
  "level_1_end",
  "partial_uncertain_or_approximate",
  "partial_unspecified",
  "long_year",
  "positive_digit",
  "season_number",
  "ua",
  "season_qualified",
  "choice_list",
  "inclusive_list",
  "masked_precision",
  "date_and_calendar",
  "long_year_scientific",
  "integer",
  "int1_4",
  "list",
  "earlier",
  "list_elements",
  "later",
  "list_element",
  "atomic",
  "consecutives",
  "pua_year",
  "pua_year_month",
  "pua_year_month_day",
  "d01_23",
  "d01_29",
  "d01_30" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_6(val, _values, result)
     result = Date.new(val[0]).year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_7(val, _values, result)
     result = Date.new(*val.flatten).month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_8(val, _values, result)
     result = Date.new(*val.flatten).day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_9(val, _values, result)
        result = DateTime.new(val[0].year, val[0].month, val[0].day, *val[2])
    result.skip_timezone = (val[2].length == 3)

    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_11(val, _values, result)
     result = val.flatten
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_12(val, _values, result)
     result = val.values_at(0, 2, 4)
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_14(val, _values, result)
     result = [24, 0, 0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_15(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_16(val, _values, result)
     result = -1 * val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_17(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_19(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_20(val, _values, result)
     result = Rational(val[0] * 60 + val[2], 1440)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_21(val, _values, result)
     result = Rational(840, 1440)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_22(val, _values, result)
     result = Rational(val[3], 1440)
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_24(val, _values, result)
     result = -val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_25(val, _values, result)
        result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_28(val, _values, result)
     result = [val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_29(val, _values, result)
        result = val[0] << val[2]
    if result[2] > 31 || (result[2] > 30 && [2,4,6,9,11].include?(result[1])) || (result[2] > 29 && result[1] == 2)
      raise ArgumentError, "invalid date (invalid days #{result[2]} for month #{result[1]})"
    end

    result
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_38(val, _values, result)
     result = EDTF::Unknown.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_39(val, _values, result)
                    result = Date.new(val[0][0]).year_precision!
                result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_44(val, _values, result)
                         result = val[1]
                     result[0] = -result[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_45(val, _values, result)
          result = [val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }, [false,true]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_46(val, _values, result)
          result = [val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }, [true, true]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 125)
  def _reduce_47(val, _values, result)
        result = Date.new(val[0]).unspecified!(:month)
    result.precision = :month

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_48(val, _values, result)
        result = Date.new(*val[0]).unspecified!(:day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 134)
  def _reduce_49(val, _values, result)
        result = Date.new(val[0]).unspecified!([:day,:month])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 139)
  def _reduce_50(val, _values, result)
        result = Interval.new(val[0], val[2])

    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.y', 150)
  def _reduce_58(val, _values, result)
          result = Date.new(val[1])
      result.precision = :year

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 155)
  def _reduce_59(val, _values, result)
          result = Date.new(-1 * val[2])
      result.precision = :year

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_60(val, _values, result)
          result = val.zip([10000,1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_61(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_62(val, _values, result)
        result = Season.new(val[0], val[2])
    val[3].each { |ua| result.send(ua) }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_63(val, _values, result)
     result = 21
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 174)
  def _reduce_64(val, _values, result)
     result = 22
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_65(val, _values, result)
     result = 23
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_66(val, _values, result)
     result = 24
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_75(val, _values, result)
     result = val[0]; result.qualifier = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 200)
  def _reduce_76(val, _values, result)
          result = Date.new(val[0].year * 10 ** val[2]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 204)
  def _reduce_77(val, _values, result)
          result = Date.new(val[1] * 10 ** val[3]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 208)
  def _reduce_78(val, _values, result)
          result = Date.new(-1 * val[2] * 10 ** val[4]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 213)
  def _reduce_79(val, _values, result)
     result = val[0]; result.calendar = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 219)
  def _reduce_80(val, _values, result)
          d = val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Decade.new(d)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 224)
  def _reduce_81(val, _values, result)
          d = val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Century.new(d)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 230)
  def _reduce_82(val, _values, result)
     result = val[1].choice!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 232)
  def _reduce_83(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 234)
  def _reduce_84(val, _values, result)
     result = EDTF::Set.new(val[0]).earlier!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 235)
  def _reduce_85(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2] + [val[4]]).earlier!.later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_86(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2]).earlier!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 237)
  def _reduce_87(val, _values, result)
     result = EDTF::Set.new([val[0]] + [val[2]]).earlier!.later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 238)
  def _reduce_88(val, _values, result)
     result = EDTF::Set.new(val[0] + [val[2]]).later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 239)
  def _reduce_89(val, _values, result)
     result = EDTF::Set.new(*val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 240)
  def _reduce_90(val, _values, result)
     result = EDTF::Set.new(val[0]).later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 243)
  def _reduce_91(val, _values, result)
     result = [val[0]].flatten
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 244)
  def _reduce_92(val, _values, result)
     result = val[0] + [val[2]].flatten
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_98(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 258)
  def _reduce_99(val, _values, result)
     result = Date.new(*val[0]).day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 259)
  def _reduce_100(val, _values, result)
     result = Date.new(*val[0]).month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 260)
  def _reduce_101(val, _values, result)
     result = Date.new(val[0]).year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 263)
  def _reduce_102(val, _values, result)
     result = (Date.new(val[0]).day_precision! .. Date.new(val[2]).day_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 264)
  def _reduce_103(val, _values, result)
     result = (Date.new(val[0]).month_precision! .. Date.new(val[2]).month_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 265)
  def _reduce_104(val, _values, result)
     result = (Date.new(val[0]).year_precision! .. Date.new(val[2]).year_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 271)
  def _reduce_105(val, _values, result)
          result = Date.new(val[0][0], val[2], val[4])
      result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 276)
  def _reduce_106(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.month_precision!
      result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 282)
  def _reduce_107(val, _values, result)
          result = Date.new(val[0][0], 1, val[5])
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:month)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 288)
  def _reduce_108(val, _values, result)
          result = Date.new(val[0][0], 1, 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!([:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 294)
  def _reduce_109(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 300)
  def _reduce_110(val, _values, result)
          result = Date.new(val[0], 1, val[5])
      result.unspecified!(:month)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 307)
  def _reduce_111(val, _values, result)
     result = val[0].year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 308)
  def _reduce_112(val, _values, result)
     result = val[0][0].month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 309)
  def _reduce_113(val, _values, result)
     result = val[0].day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 312)
  def _reduce_114(val, _values, result)
     result = uoa(Date.new(val[1]), val[0], :year)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 313)
  def _reduce_115(val, _values, result)
     result = uoa(Date.new(val[0]), val[1], :year)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_116(val, _values, result)
     result = uoa(uoa(Date.new(val[1]), val[0], :year), val[2], :year)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 318)
  def _reduce_117(val, _values, result)
          result = [uoa(val[0].change(:month => val[2]), val[3], [:month, :year])]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 321)
  def _reduce_118(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[3], [:year, :month])]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 324)
  def _reduce_119(val, _values, result)
            result = [uoa(Date.new(val[0], val[3]), val[2], [:month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 327)
  def _reduce_120(val, _values, result)
            result = [uoa(uoa(Date.new(val[0], val[3]), val[2], [:month]), val[4], [:year, :month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 330)
  def _reduce_121(val, _values, result)
            result = [uoa(val[0].change(:month => val[3]), val[2], [:month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 333)
  def _reduce_122(val, _values, result)
            result = [uoa(uoa(val[0].change(:month => val[3]), val[2], [:month]), val[4], [:year, :month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 339)
  def _reduce_123(val, _values, result)
          result = uoa(val[0][0].change(:day => val[2]), val[3], val[0][1] ? [:day] : nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 342)
  def _reduce_124(val, _values, result)
            result = uoa(val[0][0].change(:day => val[3]), val[2], [:day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 345)
  def _reduce_125(val, _values, result)
            result = uoa(uoa(val[0][0].change(:day => val[3]), val[2], [:day]), val[4], [:year, :month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 348)
  def _reduce_126(val, _values, result)
            result = uoa(uoa(Date.new(val[0], val[3], val[4]), val[2], :month), val[5], :day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 351)
  def _reduce_127(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[3])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 354)
  def _reduce_128(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[3]), val[2], [:day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 357)
  def _reduce_129(val, _values, result)
            result = uoa(uoa(Date.new(val[0][0], val[0][1], val[3]), val[2], [:day]), val[4], [:year, :month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 361)
  def _reduce_130(val, _values, result)
     result = []
    result
  end
.,.,

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.y', 365)
  def _reduce_132(val, _values, result)
     result = 0
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'parser.y', 371)
  def _reduce_143(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 372)
  def _reduce_144(val, _values, result)
     result = 10
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 373)
  def _reduce_145(val, _values, result)
     result = 11
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 374)
  def _reduce_146(val, _values, result)
     result = 12
    result
  end
.,.,

# reduce 147 omitted

module_eval(<<'.,.,', 'parser.y', 378)
  def _reduce_148(val, _values, result)
     result = 13
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 381)
  def _reduce_149(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 382)
  def _reduce_150(val, _values, result)
     result = 10 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 383)
  def _reduce_151(val, _values, result)
     result = 20
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 384)
  def _reduce_152(val, _values, result)
     result = 21
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 385)
  def _reduce_153(val, _values, result)
     result = 22
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 386)
  def _reduce_154(val, _values, result)
     result = 23
    result
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.y', 394)
  def _reduce_158(val, _values, result)
     result = 24
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 395)
  def _reduce_159(val, _values, result)
     result = 25
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 396)
  def _reduce_160(val, _values, result)
     result = 26
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 397)
  def _reduce_161(val, _values, result)
     result = 27
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 398)
  def _reduce_162(val, _values, result)
     result = 28
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 399)
  def _reduce_163(val, _values, result)
     result = 29
    result
  end
.,.,

# reduce 164 omitted

module_eval(<<'.,.,', 'parser.y', 403)
  def _reduce_165(val, _values, result)
     result = 30
    result
  end
.,.,

# reduce 166 omitted

module_eval(<<'.,.,', 'parser.y', 407)
  def _reduce_167(val, _values, result)
     result = 31
    result
  end
.,.,

# reduce 168 omitted

module_eval(<<'.,.,', 'parser.y', 411)
  def _reduce_169(val, _values, result)
     result = 30 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 412)
  def _reduce_170(val, _values, result)
     result = 40 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 413)
  def _reduce_171(val, _values, result)
     result = 50 + val[1]
    result
  end
.,.,

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'parser.y', 420)
  def _reduce_174(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 421)
  def _reduce_175(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 424)
  def _reduce_176(val, _values, result)
               result = val.zip([100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 428)
  def _reduce_177(val, _values, result)
               result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 432)
  def _reduce_178(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 433)
  def _reduce_179(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module EDTF
