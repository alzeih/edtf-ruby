#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'strscan'

module EDTF
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 446)

  @defaults = {
    :level => 2,
    :debug => false
  }.freeze

  class << self; attr_reader :defaults; end

  attr_reader :options

  def initialize(options = {})
    @options = Parser.defaults.merge(options)
  end

  def debug?
    !!(options[:debug] || ENV['DEBUG'])
  end

  def parse(input)
    parse!(input)
  rescue => e
    warn e.message if debug?
    nil
  end

  def parse!(input)
    @yydebug = debug?
    @src = StringScanner.new(input)
    do_parse
  end

  def on_error(tid, value, stack)
    raise ArgumentError,
      "failed to parse date: unexpected '#{value}' at #{stack.inspect}"
  end

  def apply_uncertainty(date, uncertainty, scope = nil)
    uncertainty.each do |u|
      scope.nil? ? date.send(u) : date.send(u, scope)
    end
    date
  end

  alias uoa apply_uncertainty

  def next_token
    case
    when @src.eos?
      nil
    # when @src.scan(/\s+/)
      # ignore whitespace
    when @src.scan(/\(/)
      ['(', @src.matched]
    # when @src.scan(/\)\?~-/)
    #   [:PUA, [:uncertain!, :approximate!]]
    # when @src.scan(/\)\?-/)
    #   [:PUA, [:uncertain!]]
    # when @src.scan(/\)~-/)
    #   [:PUA, [:approximate!]]
    when @src.scan(/\)/)
      [')', @src.matched]
    when @src.scan(/\[/)
      ['[', @src.matched]
    when @src.scan(/\]/)
      [']', @src.matched]
    when @src.scan(/\{/)
      ['{', @src.matched]
    when @src.scan(/\}/)
      ['}', @src.matched]
    when @src.scan(/T/)
      [:T, @src.matched]
    when @src.scan(/Z/)
      [:Z, @src.matched]
    when @src.scan(/\?~/)
      [:UA, [:uncertain!, :approximate!]]
    when @src.scan(/\?/)
      [:UA, [:uncertain!]]
    when @src.scan(/~/)
      [:UA, [:approximate!]]
    when @src.scan(/open/i)
      [:OPEN, :open]
    when @src.scan(/unkn?own/i) # matches 'unkown' typo too
      [:UNKNOWN, :unknown]
    when @src.scan(/u/)
      [:U, @src.matched]
    when @src.scan(/x/i)
      [:X, @src.matched]
    when @src.scan(/y/)
      [:LONGYEAR, @src.matched]
    when @src.scan(/e/)
      [:E, @src.matched]
    when @src.scan(/\+/)
      ['+', @src.matched]
    when @src.scan(/-\(/)
      ['-(', @src.matched]
    when @src.scan(/-/)
      ['-', @src.matched]
    when @src.scan(/:/)
      [':', @src.matched]
    when @src.scan(/\//)
      ['/', @src.matched]
    when @src.scan(/\s*\.\.\s*/)
      [:DOTS, '..']
    when @src.scan(/\s*,\s*/)
      [',', ',']
    when @src.scan(/\^\w+/)
      ['^', @src.matched[1..-1]]
    when @src.scan(/\d/)
      [@src.matched, @src.matched.to_i]
    else @src.scan(/./)
      [:UNMATCHED, @src.rest]
    end
  end


# -*- racc -*-
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   128,   127,   113,    55,    54,   114,   148,    58,   207,   206,
    46,    48,    43,   147,   149,    45,   168,    47,    46,    48,
    43,    59,   -51,    45,    56,    47,    49,    50,    51,    52,
    53,   169,   170,    59,    49,    50,    51,    52,    53,    18,
    27,   202,    28,   -53,   203,    42,    58,   259,    46,    48,
    43,    11,    57,    45,    64,    47,   120,    35,   119,    36,
   127,   105,    38,   123,    49,    50,    51,    52,    53,    46,
    48,    43,    65,    66,    45,   163,    47,   120,   250,   247,
   113,   206,   105,   114,   249,    49,    50,    51,    52,    53,
    46,    48,    43,   251,   112,    45,   120,    47,   119,   113,
    67,   105,   114,   123,    68,   -68,    49,    50,    51,    52,
    53,    27,   141,   -69,   280,    94,    42,    95,   285,    46,
    48,    43,    11,   120,    45,   119,    47,   120,   105,   119,
   123,    97,   105,    38,   123,    49,    50,    51,    52,    53,
    87,    42,    58,   131,    46,    48,    43,    11,   159,    45,
    58,    47,   120,   250,   247,   146,   214,   105,    38,   249,
    49,    50,    51,    52,    53,    87,    42,   133,   251,    46,
    48,    43,    11,   150,    45,   120,    47,   119,   113,   151,
   105,   114,   123,    38,   152,    49,    50,    51,    52,    53,
    42,   218,   153,    46,    48,    43,    89,   112,    45,   120,
    47,   119,   113,   157,   105,   114,   123,   160,   161,    49,
    50,    51,    52,    53,    42,   109,   166,    46,    48,    43,
    11,   112,    45,   102,    47,   104,   113,   113,   105,   114,
   114,    38,   171,    49,    50,    51,    52,    53,    42,   180,
   181,    46,    48,    43,    11,   183,    45,   193,    47,   175,
   172,   173,   194,   208,   174,    38,   176,    49,    50,    51,
    52,    53,    42,   209,   211,    46,    48,    43,    11,   212,
    45,   213,    47,    46,    48,    43,   215,   228,    45,    38,
    47,    49,    50,    51,    52,    53,   229,   231,   183,    49,
    50,    51,    52,    53,    46,    48,    43,   240,   183,    45,
   239,    47,    46,    48,   253,    70,   254,    45,   257,    47,
    49,    50,    51,    52,    53,   260,   263,   228,    49,    50,
    51,    52,    53,    46,    48,    43,    89,   229,    45,   264,
    47,    46,    48,    43,   244,   193,    45,   239,    47,    49,
    50,    51,    52,    53,   267,   268,   269,    49,    50,    51,
    52,    53,    46,    48,   274,   113,   279,    45,   114,    47,
    46,    48,    43,   183,   283,    45,   287,    47,    49,    50,
    51,    52,    53,   290,   291,   292,    49,    50,    51,    52,
    53,    46,    48,   295,   296,   297,    45,   280,    47,    46,
    48,    43,   298,   301,    45,   302,    47,    49,    50,    51,
    52,    53,   304,   305,   nil,    49,    50,    51,    52,    53,
    46,    48,    43,    89,   nil,    45,   nil,    47,    46,    48,
    43,   nil,   nil,    45,   nil,    47,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,    43,   nil,   nil,    45,   nil,    47,    46,    48,   178,
   nil,   nil,    45,   nil,    47,    49,    50,    51,    52,    53,
   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,    48,
    43,   nil,   nil,    45,   nil,    47,    46,    48,   nil,   nil,
   nil,    45,   nil,    47,    49,    50,    51,    52,    53,   nil,
   nil,   nil,    49,    50,    51,    52,    53,    46,    48,   nil,
   nil,   nil,    45,   nil,    47,   175,   196,   173,   nil,   nil,
   174,   nil,   176,    49,    50,    51,    52,    53,   nil,   nil,
   nil,   197,   198,   199,   200,   201,    46,    48,    43,   nil,
   nil,    45,   nil,    47,    46,    48,    43,   nil,   nil,    45,
   nil,    47,    49,    50,    51,    52,    53,   nil,   nil,   nil,
    49,    50,    51,    52,    53,    46,    48,    43,   nil,   nil,
    45,   nil,    47,    46,    48,   nil,   nil,   nil,    45,   nil,
    47,    49,    50,    51,    52,    53,   nil,   nil,   nil,    49,
    50,    51,    52,    53,    46,    48,    43,    89,   nil,    45,
   nil,    47,    46,    48,    43,    89,   nil,    45,   nil,    47,
    49,    50,    51,    52,    53,   nil,   nil,   nil,    49,    50,
    51,    52,    53,    46,    48,    43,    89,   nil,    45,   nil,
    47,    46,    48,    43,   nil,   nil,    45,   nil,    47,    49,
    50,    51,    52,    53,   nil,   nil,   nil,    49,    50,    51,
    52,    53,    46,    48,   nil,   nil,   nil,    45,   nil,    47,
    46,    48,    43,   nil,   nil,    45,   nil,    47,    49,    50,
    51,    52,    53,   nil,   nil,   nil,    49,    50,    51,    52,
    53,    46,    48,    43,   nil,   nil,    45,   nil,    47,    46,
    48,    43,   nil,   nil,    45,   nil,    47,    49,    50,    51,
    52,    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,
    46,    48,   272,   nil,   nil,    45,   nil,    47,    46,    48,
   273,   nil,   nil,    45,   nil,    47,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,   275,   nil,   nil,    45,   nil,    47,    46,    48,    43,
   nil,   nil,    45,   nil,    47,    49,    50,    51,    52,    53,
   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,    48,
    43,   nil,   nil,    45,   nil,    47,    46,    48,    43,   nil,
   nil,    45,   nil,    47,    49,    50,    51,    52,    53,   nil,
   nil,   nil,    49,    50,    51,    52,    53,    46,    48,    43,
   nil,   nil,    45,   nil,    47,    46,    48,    43,   nil,   nil,
    45,   nil,    47,    49,    50,    51,    52,    53,   nil,   nil,
   nil,    49,    50,    51,    52,    53,    46,    48,   303,   165,
   nil,    45,   120,    47,   119,   nil,   nil,   105,   nil,   123,
   nil,   117,    49,    50,    51,    52,    53,   118,   nil,   192,
   120,   190,   119,   nil,   191,   105,   nil,   123,   120,   250,
   247,   nil,   nil,   105,   nil,   249,   120,   250,   119,   nil,
   nil,   105,   nil,   249,   251,   nil,   120,   250,   300,   109,
   nil,   105,   251,   249,   nil,   112,   118,   nil,   111,   120,
   113,   119,   251,   114,   105,   255,   123,   nil,   120,   nil,
   119,   185,   187,   105,   nil,   123,   184,   nil,   186,   192,
   270,   190,   nil,   nil,   191,   nil,   271 ]

racc_action_check = [
    63,    63,   112,     5,     1,   112,    73,    73,   126,   126,
    63,    63,    63,    73,    74,    63,    99,    63,   126,   126,
   126,    74,     5,   126,     5,   126,    63,    63,    63,    63,
    63,    99,    99,     8,   126,   126,   126,   126,   126,     0,
     0,   123,     0,    14,   123,     0,     7,   212,     0,     0,
     0,     0,     7,     0,    16,     0,   212,     0,   212,     0,
   125,   212,     0,   212,     0,     0,     0,     0,     0,   125,
   125,   125,    17,    18,   125,    94,   125,   171,   171,   171,
    94,   204,   171,    94,   171,   125,   125,   125,   125,   125,
   204,   204,   204,   171,   159,   204,   118,   204,   118,   159,
    19,   118,   159,   118,    24,    25,   204,   204,   204,   204,
   204,    68,    68,    26,   254,    39,    68,    40,   260,    68,
    68,    68,    68,   254,    68,   254,    68,   260,   254,   260,
   254,    54,   260,    68,   260,    68,    68,    68,    68,    68,
    35,    35,    91,    66,    35,    35,    35,    35,    91,    35,
   134,    35,   269,   269,   269,    72,   134,   269,    35,   269,
    35,    35,    35,    35,    35,    36,    36,    67,   269,    36,
    36,    36,    36,    75,    36,   165,    36,   165,    67,    77,
   165,    67,   165,    36,    78,    36,    36,    36,    36,    36,
    38,   147,    79,    38,    38,    38,    38,   147,    38,   229,
    38,   229,   147,    88,   229,   147,   229,    92,    93,    38,
    38,    38,    38,    38,   152,   214,    96,   152,   152,   152,
   152,   214,   152,    55,   152,    55,   214,   163,    55,   214,
   163,   152,   100,   152,   152,   152,   152,   152,   153,   108,
   109,   153,   153,   153,   153,   110,   153,   116,   153,   102,
   102,   102,   117,   127,   102,   153,   102,   153,   153,   153,
   153,   153,   264,   128,   131,   264,   264,   264,   264,   132,
   264,   133,   264,    11,    11,    11,   144,   154,    11,   264,
    11,   264,   264,   264,   264,   264,   155,   160,   162,    11,
    11,    11,    11,    11,    12,    12,    12,   169,   164,    12,
   169,    12,    28,    28,   172,    28,   181,    28,   195,    28,
    12,    12,    12,    12,    12,   213,   218,   220,    28,    28,
    28,    28,    28,    42,    42,    42,    42,   222,    42,   224,
    42,    61,    61,    61,   170,   232,    61,   170,    61,    42,
    42,    42,    42,    42,   234,   236,   238,    61,    61,    61,
    61,    61,    64,    64,   245,   228,   253,    64,   228,    64,
    69,    69,    69,   256,   259,    69,   263,    69,    64,    64,
    64,    64,    64,   270,   272,   273,    69,    69,    69,    69,
    69,    70,    70,   279,   280,   285,    70,   287,    70,    71,
    71,    71,   290,   295,    71,   298,    71,    70,    70,    70,
    70,    70,   301,   304,   nil,    71,    71,    71,    71,    71,
    87,    87,    87,    87,   nil,    87,   nil,    87,    89,    89,
    89,   nil,   nil,    89,   nil,    89,    87,    87,    87,    87,
    87,   nil,   nil,   nil,    89,    89,    89,    89,    89,    90,
    90,    90,   nil,   nil,    90,   nil,    90,   104,   104,   104,
   nil,   nil,   104,   nil,   104,    90,    90,    90,    90,    90,
   nil,   nil,   nil,   104,   104,   104,   104,   104,   105,   105,
   105,   nil,   nil,   105,   nil,   105,   113,   113,   nil,   nil,
   nil,   113,   nil,   113,   105,   105,   105,   105,   105,   nil,
   nil,   nil,   113,   113,   113,   113,   113,   119,   119,   nil,
   nil,   nil,   119,   nil,   119,   120,   120,   120,   nil,   nil,
   120,   nil,   120,   119,   119,   119,   119,   119,   nil,   nil,
   nil,   120,   120,   120,   120,   120,   129,   129,   129,   nil,
   nil,   129,   nil,   129,   143,   143,   143,   nil,   nil,   143,
   nil,   143,   129,   129,   129,   129,   129,   nil,   nil,   nil,
   143,   143,   143,   143,   143,   145,   145,   145,   nil,   nil,
   145,   nil,   145,   146,   146,   nil,   nil,   nil,   146,   nil,
   146,   145,   145,   145,   145,   145,   nil,   nil,   nil,   146,
   146,   146,   146,   146,   148,   148,   148,   148,   nil,   148,
   nil,   148,   149,   149,   149,   149,   nil,   149,   nil,   149,
   148,   148,   148,   148,   148,   nil,   nil,   nil,   149,   149,
   149,   149,   149,   150,   150,   150,   150,   nil,   150,   nil,
   150,   158,   158,   158,   nil,   nil,   158,   nil,   158,   150,
   150,   150,   150,   150,   nil,   nil,   nil,   158,   158,   158,
   158,   158,   215,   215,   nil,   nil,   nil,   215,   nil,   215,
   216,   216,   216,   nil,   nil,   216,   nil,   216,   215,   215,
   215,   215,   215,   nil,   nil,   nil,   216,   216,   216,   216,
   216,   217,   217,   217,   nil,   nil,   217,   nil,   217,   230,
   230,   230,   nil,   nil,   230,   nil,   230,   217,   217,   217,
   217,   217,   nil,   nil,   nil,   230,   230,   230,   230,   230,
   240,   240,   240,   nil,   nil,   240,   nil,   240,   244,   244,
   244,   nil,   nil,   244,   nil,   244,   240,   240,   240,   240,
   240,   nil,   nil,   nil,   244,   244,   244,   244,   244,   247,
   247,   247,   nil,   nil,   247,   nil,   247,   249,   249,   249,
   nil,   nil,   249,   nil,   249,   247,   247,   247,   247,   247,
   nil,   nil,   nil,   249,   249,   249,   249,   249,   250,   250,
   250,   nil,   nil,   250,   nil,   250,   251,   251,   251,   nil,
   nil,   251,   nil,   251,   250,   250,   250,   250,   250,   nil,
   nil,   nil,   251,   251,   251,   251,   251,   261,   261,   261,
   nil,   nil,   261,   nil,   261,   262,   262,   262,   nil,   nil,
   262,   nil,   262,   261,   261,   261,   261,   261,   nil,   nil,
   nil,   262,   262,   262,   262,   262,   300,   300,   300,    95,
   nil,   300,    95,   300,    95,   nil,   nil,    95,   nil,    95,
   nil,    59,   300,   300,   300,   300,   300,    59,   nil,   114,
    59,   114,    59,   nil,   114,    59,   nil,    59,   274,   274,
   274,   nil,   nil,   274,   nil,   274,   291,   291,   291,   nil,
   nil,   291,   nil,   291,   274,   nil,   292,   292,   292,    57,
   nil,   292,   291,   292,   nil,    57,   161,   nil,    57,   161,
    57,   161,   292,    57,   161,   188,   161,   nil,   188,   nil,
   188,   111,   111,   188,   nil,   188,   111,   nil,   111,   239,
   239,   239,   nil,   nil,   239,   nil,   239 ]

racc_action_pointer = [
    33,     4,   nil,   nil,   nil,     1,   nil,    34,    15,   nil,
   nil,   258,   279,   nil,    22,   nil,    50,    49,    67,    82,
   nil,   nil,   nil,   nil,    83,   105,   113,   nil,   287,   nil,
   nil,   nil,   nil,   nil,   nil,   129,   154,   nil,   178,    97,
    99,   nil,   308,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   131,   208,   nil,   863,   nil,   825,
   nil,   316,   nil,    -5,   337,   nil,   137,   161,   104,   345,
   366,   374,   151,    -5,     3,   162,   nil,   154,   156,   164,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   395,   176,   403,
   424,   130,   177,   190,    63,   807,   204,   nil,   nil,    13,
   218,   nil,   234,   nil,   432,   453,   nil,   nil,   227,   234,
   233,   876,   -15,   461,   824,   nil,   235,   246,    81,   482,
   490,   nil,   nil,    24,   nil,    54,     3,   247,   258,   511,
   nil,   258,   251,   265,   138,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   519,   272,   540,   548,   185,   569,   577,
   598,   nil,   202,   226,   259,   268,   nil,   nil,   606,    82,
   275,   864,   276,   210,   286,   160,   nil,   nil,   nil,   280,
   317,    62,   290,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   288,   nil,   nil,   nil,   nil,   nil,   nil,   873,   nil,
   nil,   nil,   nil,   nil,   nil,   296,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    75,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    41,   297,   209,   627,   635,   656,   310,   nil,
   299,   nil,   309,   nil,   301,   nil,   nil,   nil,   338,   184,
   664,   nil,   323,   nil,   332,   nil,   333,   nil,   332,   884,
   685,   nil,   nil,   nil,   693,   340,   nil,   714,   nil,   722,
   743,   751,   nil,   339,   108,   nil,   351,   nil,   nil,   358,
   112,   772,   780,   348,   250,   nil,   nil,   nil,   nil,   137,
   359,   nil,   360,   361,   833,   nil,   nil,   nil,   nil,   366,
   378,   nil,   nil,   nil,   nil,   379,   nil,   381,   nil,   nil,
   375,   841,   851,   nil,   nil,   379,   nil,   nil,   378,   nil,
   801,   385,   nil,   nil,   386,   nil ]

racc_action_default = [
  -182,  -182,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
   -23,  -182,  -182,   -33,   -34,   -35,   -36,   -37,  -182,   -39,
   -40,   -41,   -42,   -43,  -182,   -52,   -54,   -55,  -182,   -67,
   -70,   -71,   -72,   -73,   -74,  -182,  -182,  -111,  -182,  -113,
  -114,  -115,  -182,  -134,  -135,  -136,  -137,  -138,  -139,  -140,
  -141,  -142,  -143,  -144,  -182,  -182,   -79,  -182,  -117,  -182,
   -24,  -182,   -44,  -182,  -182,   -75,  -182,  -182,  -182,   -58,
  -182,  -176,  -182,    -6,    -7,    -8,   -39,  -182,   -84,   -89,
   -90,   -91,   -93,   -94,   -95,   -96,   -97,  -182,  -182,  -182,
  -182,  -182,  -182,  -182,  -182,  -182,  -116,   306,    -9,   -10,
  -182,   -13,  -182,   -30,  -182,  -182,  -158,   -26,   -28,  -182,
  -132,  -182,  -182,  -182,  -182,   -27,   -29,  -182,  -182,  -182,
  -182,  -159,  -166,  -182,  -168,  -182,  -182,  -182,  -182,   -76,
  -180,  -182,  -106,  -182,    -6,   -50,   -51,   -52,   -53,   -54,
   -56,   -57,   -61,   -59,  -182,  -177,  -182,  -182,  -101,  -100,
   -99,   -82,  -182,  -182,    -6,    -7,   -98,   -83,  -182,  -182,
  -182,  -182,  -132,  -182,  -132,  -182,  -118,   -11,   -15,  -182,
  -182,  -182,  -182,  -153,  -154,  -155,  -156,  -151,  -157,  -152,
  -120,   -47,   -62,  -133,   -63,   -64,   -65,   -66,  -121,  -145,
  -146,  -147,  -148,  -129,   -48,  -130,  -160,  -161,  -162,  -163,
  -164,  -165,  -167,  -169,  -182,   -25,   -45,   -80,   -46,   -81,
  -181,   -38,  -182,  -182,  -182,  -182,  -178,   -77,  -182,  -104,
  -182,  -103,  -182,  -102,   -86,   -87,   -88,   -92,  -182,  -182,
  -182,  -112,  -182,  -119,  -123,  -125,  -126,   -16,  -182,  -182,
  -182,  -149,   -17,   -18,  -182,  -182,   -31,  -182,  -170,  -182,
  -182,  -182,  -175,  -182,  -182,  -122,  -132,  -131,  -105,  -182,
  -182,   -78,  -179,   -47,  -182,   -28,   -29,  -124,  -127,  -182,
  -182,  -150,  -182,  -182,  -182,  -174,  -171,  -172,  -173,  -182,
  -182,  -110,  -128,  -109,  -107,  -182,   -60,  -182,   -85,   -20,
  -182,  -182,  -182,   -12,   -32,  -182,   -49,  -108,  -182,   -22,
  -182,  -182,   -21,   -19,  -182,   -14 ]

racc_goto_table = [
    71,   132,   129,   227,   116,   248,    12,   225,   226,    60,
    14,     7,   182,     9,   245,     5,     1,    69,    63,    72,
     8,    19,    24,     2,    25,     3,    26,     4,   162,   237,
   243,   299,   299,   241,   241,     6,   130,    77,    88,    98,
   164,    99,    71,   167,    90,   100,   188,   293,    90,    91,
   101,   242,   103,    96,   294,    13,    15,    16,    93,   143,
    17,   144,    62,   195,   233,   135,   235,   125,   110,   126,
    29,    30,    31,    32,    33,   142,   177,   145,   138,   134,
    34,     9,   224,   136,   217,   189,    92,    60,     8,    19,
   140,   177,   137,    90,   139,    90,   158,   234,   154,   106,
     9,   nil,   156,   248,   nil,   nil,   232,   155,   248,   nil,
   236,   179,   289,   nil,   227,   nil,   nil,   nil,   130,   288,
   nil,   nil,   nil,   nil,   nil,   248,   248,   nil,   nil,   nil,
   nil,   204,   205,   256,   nil,   210,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   142,
   nil,   216,   nil,   261,    90,    90,    90,   258,   282,   219,
   220,   220,   265,   223,   230,   nil,   nil,   nil,   nil,   221,
   222,   nil,   nil,   nil,   266,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   130,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   281,
   nil,   nil,   nil,   nil,   nil,   284,   nil,   nil,   nil,   nil,
   205,   nil,   189,   nil,   nil,   nil,   189,   nil,   nil,   177,
   nil,   nil,   262,   210,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   205,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   276,   277,   278,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   210,   286,   nil,
   nil,   nil,   177 ]

racc_goto_check = [
    44,    23,    53,    59,    25,    67,    22,    58,    58,    21,
    30,     7,    46,     9,    14,     5,     1,    43,    22,    54,
     8,    34,    39,     2,    41,     3,    42,     4,    23,    17,
    17,    20,    20,    24,    24,     6,    44,    55,    55,    10,
    25,    11,    44,    12,    22,    13,    23,    15,    22,     7,
    16,    18,    27,     7,    28,    29,    31,    32,     8,    43,
    33,    54,    38,    25,    46,    40,    46,    22,    45,    22,
    47,    48,    49,    50,    51,    22,    44,    22,    30,     7,
    52,     9,    57,     5,    53,    44,    62,    21,     8,    34,
    39,    44,    41,    22,    42,    22,    22,    23,     7,    66,
     9,   nil,     5,    67,   nil,   nil,    25,     8,    67,   nil,
    25,    22,    14,   nil,    59,   nil,   nil,   nil,    44,    58,
   nil,   nil,   nil,   nil,   nil,    67,    67,   nil,   nil,   nil,
   nil,    22,    22,    25,   nil,    22,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,    22,   nil,    53,    22,    22,    22,    25,    46,     7,
     7,     7,    23,     9,    22,   nil,   nil,   nil,   nil,     8,
     8,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
    22,   nil,    44,   nil,   nil,   nil,    44,   nil,   nil,    44,
   nil,   nil,    22,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    22,    22,    22,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,    22,   nil,
   nil,   nil,    44 ]

racc_goto_pointer = [
   nil,    16,    23,    25,    27,    15,    35,    11,    20,    13,
   -16,   -14,   -56,   -10,  -157,  -227,    -5,  -140,  -119,   nil,
  -260,    -2,     6,   -66,  -136,   -55,   nil,    -3,  -220,    55,
    10,    56,    57,    60,    21,   nil,   nil,   nil,    51,    22,
    -3,    24,    26,   -11,   -28,    11,   -98,    70,    71,    72,
    73,    74,    80,   -62,    -9,     2,   nil,   -70,  -145,  -150,
   nil,   nil,    48,   nil,   nil,   nil,    44,  -166,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    84,   nil,    73,    74,    75,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   238,
   252,    10,    61,   108,   107,   nil,   115,   nil,   246,   nil,
    86,   nil,   nil,   nil,    76,    20,    21,    22,    23,   nil,
   nil,    85,   nil,   nil,    44,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    78,    79,    80,    81,
    82,    83,    37,    39,    40,    41,   121,   122,   124 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 41, :_reduce_6,
  1, 41, :_reduce_7,
  1, 41, :_reduce_8,
  3, 42, :_reduce_9,
  1, 46, :_reduce_none,
  2, 46, :_reduce_11,
  5, 47, :_reduce_12,
  1, 47, :_reduce_none,
  8, 52, :_reduce_14,
  1, 48, :_reduce_15,
  2, 48, :_reduce_16,
  2, 48, :_reduce_17,
  1, 54, :_reduce_none,
  5, 54, :_reduce_19,
  3, 53, :_reduce_20,
  5, 53, :_reduce_21,
  4, 53, :_reduce_22,
  1, 43, :_reduce_none,
  2, 43, :_reduce_24,
  4, 57, :_reduce_25,
  1, 59, :_reduce_none,
  1, 61, :_reduce_none,
  3, 44, :_reduce_28,
  3, 45, :_reduce_29,
  1, 49, :_reduce_none,
  1, 50, :_reduce_none,
  1, 51, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  4, 65, :_reduce_38,
  1, 66, :_reduce_39,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 70, :_reduce_none,
  2, 70, :_reduce_44,
  4, 74, :_reduce_45,
  4, 74, :_reduce_46,
  4, 71, :_reduce_47,
  4, 72, :_reduce_48,
  7, 73, :_reduce_49,
  3, 67, :_reduce_50,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  2, 68, :_reduce_58,
  3, 68, :_reduce_59,
  5, 79, :_reduce_60,
  2, 79, :_reduce_61,
  4, 69, :_reduce_62,
  2, 81, :_reduce_63,
  2, 81, :_reduce_64,
  2, 81, :_reduce_65,
  2, 81, :_reduce_66,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  2, 83, :_reduce_75,
  3, 88, :_reduce_76,
  4, 88, :_reduce_77,
  5, 88, :_reduce_78,
  2, 87, :_reduce_79,
  4, 86, :_reduce_80,
  4, 86, :_reduce_81,
  3, 84, :_reduce_82,
  3, 85, :_reduce_83,
  1, 91, :_reduce_84,
  5, 91, :_reduce_85,
  3, 91, :_reduce_86,
  3, 91, :_reduce_87,
  3, 91, :_reduce_88,
  1, 91, :_reduce_89,
  1, 91, :_reduce_90,
  1, 93, :_reduce_91,
  3, 93, :_reduce_92,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  2, 92, :_reduce_98,
  2, 94, :_reduce_99,
  2, 94, :_reduce_100,
  2, 94, :_reduce_101,
  3, 97, :_reduce_102,
  3, 97, :_reduce_103,
  3, 97, :_reduce_104,
  5, 78, :_reduce_105,
  3, 78, :_reduce_106,
  6, 78, :_reduce_107,
  7, 78, :_reduce_108,
  6, 78, :_reduce_109,
  6, 78, :_reduce_110,
  1, 77, :_reduce_none,
  4, 77, :_reduce_112,
  1, 98, :_reduce_113,
  1, 98, :_reduce_114,
  1, 98, :_reduce_115,
  2, 99, :_reduce_116,
  2, 99, :_reduce_117,
  3, 99, :_reduce_118,
  4, 100, :_reduce_119,
  4, 100, :_reduce_120,
  4, 100, :_reduce_121,
  5, 100, :_reduce_122,
  4, 100, :_reduce_123,
  5, 100, :_reduce_124,
  4, 101, :_reduce_125,
  4, 101, :_reduce_126,
  5, 101, :_reduce_127,
  6, 101, :_reduce_128,
  4, 101, :_reduce_129,
  4, 101, :_reduce_130,
  5, 101, :_reduce_131,
  0, 82, :_reduce_132,
  1, 82, :_reduce_none,
  1, 58, :_reduce_134,
  1, 58, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  2, 60, :_reduce_145,
  2, 60, :_reduce_146,
  2, 60, :_reduce_147,
  2, 60, :_reduce_148,
  1, 55, :_reduce_none,
  2, 55, :_reduce_150,
  2, 102, :_reduce_151,
  2, 102, :_reduce_152,
  2, 102, :_reduce_153,
  2, 102, :_reduce_154,
  2, 102, :_reduce_155,
  2, 102, :_reduce_156,
  2, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 103, :_reduce_none,
  2, 103, :_reduce_160,
  2, 103, :_reduce_161,
  2, 103, :_reduce_162,
  2, 103, :_reduce_163,
  2, 103, :_reduce_164,
  2, 103, :_reduce_165,
  1, 104, :_reduce_none,
  2, 104, :_reduce_167,
  1, 62, :_reduce_none,
  2, 62, :_reduce_169,
  1, 56, :_reduce_none,
  2, 56, :_reduce_171,
  2, 56, :_reduce_172,
  2, 56, :_reduce_173,
  2, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 90, :_reduce_176,
  2, 90, :_reduce_177,
  3, 90, :_reduce_178,
  4, 90, :_reduce_179,
  1, 89, :_reduce_180,
  2, 89, :_reduce_181 ]

racc_reduce_n = 182

racc_shift_n = 306

racc_token_table = {
  false => 0,
  :error => 1,
  :T => 2,
  :Z => 3,
  :E => 4,
  :X => 5,
  :U => 6,
  :UNKNOWN => 7,
  :OPEN => 8,
  :LONGYEAR => 9,
  :UNMATCHED => 10,
  :DOTS => 11,
  :UA => 12,
  :PUA => 13,
  ":" => 14,
  "2" => 15,
  "4" => 16,
  "0" => 17,
  "-" => 18,
  "+" => 19,
  "1" => 20,
  "/" => 21,
  "3" => 22,
  "^" => 23,
  "[" => 24,
  "]" => 25,
  "{" => 26,
  "}" => 27,
  "," => 28,
  "(" => 29,
  ")" => 30,
  "5" => 31,
  "6" => 32,
  "7" => 33,
  "8" => 34,
  "9" => 35 }

racc_nt_base = 36

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T",
  "Z",
  "E",
  "X",
  "U",
  "UNKNOWN",
  "OPEN",
  "LONGYEAR",
  "UNMATCHED",
  "DOTS",
  "UA",
  "PUA",
  "\":\"",
  "\"2\"",
  "\"4\"",
  "\"0\"",
  "\"-\"",
  "\"+\"",
  "\"1\"",
  "\"/\"",
  "\"3\"",
  "\"^\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\"5\"",
  "\"6\"",
  "\"7\"",
  "\"8\"",
  "\"9\"",
  "$start",
  "edtf",
  "level_0_expression",
  "level_1_expression",
  "level_2_expression",
  "date",
  "date_time",
  "year",
  "year_month",
  "year_month_day",
  "time",
  "base_time",
  "zone_offset",
  "hour",
  "minute",
  "second",
  "midnight",
  "zone_offset_hour",
  "positive_zone_offset",
  "d01_13",
  "d01_59",
  "positive_year",
  "digit",
  "month",
  "d01_12",
  "day",
  "d01_31",
  "d00_23",
  "d00_59",
  "unknown",
  "unspecified",
  "level_1_interval",
  "long_year_simple",
  "season",
  "unspecified_year",
  "unspecified_month",
  "unspecified_day",
  "unspecified_day_and_month",
  "positive_unspecified_year",
  "level_1_start",
  "level_1_end",
  "partial_uncertain_or_approximate",
  "partial_unspecified",
  "long_year",
  "positive_digit",
  "season_number",
  "ua",
  "season_qualified",
  "choice_list",
  "inclusive_list",
  "masked_precision",
  "date_and_calendar",
  "long_year_scientific",
  "integer",
  "int1_4",
  "list",
  "earlier",
  "list_elements",
  "later",
  "list_element",
  "atomic",
  "consecutives",
  "pua_base",
  "pua_year",
  "pua_year_month",
  "pua_year_month_day",
  "d01_23",
  "d01_29",
  "d01_30" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_6(val, _values, result)
     result = Date.new(val[0]).year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_7(val, _values, result)
     result = Date.new(*val.flatten).month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_8(val, _values, result)
     result = Date.new(*val.flatten).day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_9(val, _values, result)
        result = DateTime.new(val[0].year, val[0].month, val[0].day, *val[2])
    result.skip_timezone = (val[2].length == 3)

    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_11(val, _values, result)
     result = val.flatten
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_12(val, _values, result)
     result = val.values_at(0, 2, 4)
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_14(val, _values, result)
     result = [24, 0, 0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_15(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_16(val, _values, result)
     result = -1 * val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_17(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_19(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_20(val, _values, result)
     result = Rational(val[0] * 60 + val[2], 1440)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_21(val, _values, result)
     result = Rational(840, 1440)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_22(val, _values, result)
     result = Rational(val[3], 1440)
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_24(val, _values, result)
     result = -val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_25(val, _values, result)
        result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_28(val, _values, result)
     result = [val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_29(val, _values, result)
        result = val[0] << val[2]
    if result[2] > 31 || (result[2] > 30 && [2,4,6,9,11].include?(result[1])) || (result[2] > 29 && result[1] == 2)
      raise ArgumentError, "invalid date (invalid days #{result[2]} for month #{result[1]})"
    end

    result
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_38(val, _values, result)
     result = EDTF::Unknown.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_39(val, _values, result)
                    result = Date.new(val[0][0]).year_precision!
                result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_44(val, _values, result)
                         result = val[1]
                     result[0] = -result[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_45(val, _values, result)
          result = [val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }, [false,true]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_46(val, _values, result)
          result = [val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }, [true, true]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 125)
  def _reduce_47(val, _values, result)
        result = Date.new(val[0]).unspecified!(:month)
    result.precision = :month

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_48(val, _values, result)
        result = Date.new(*val[0]).unspecified!(:day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 134)
  def _reduce_49(val, _values, result)
        result = Date.new(val[0]).unspecified!([:day,:month])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 139)
  def _reduce_50(val, _values, result)
        result = Interval.new(val[0], val[2])

    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.y', 150)
  def _reduce_58(val, _values, result)
          result = Date.new(val[1])
      result.precision = :year

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 155)
  def _reduce_59(val, _values, result)
          result = Date.new(-1 * val[2])
      result.precision = :year

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_60(val, _values, result)
          result = val.zip([10000,1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_61(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_62(val, _values, result)
        result = Season.new(val[0], val[2])
    val[3].each { |ua| result.send(ua) }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_63(val, _values, result)
     result = 21
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 174)
  def _reduce_64(val, _values, result)
     result = 22
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_65(val, _values, result)
     result = 23
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_66(val, _values, result)
     result = 24
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_75(val, _values, result)
     result = val[0]; result.qualifier = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 200)
  def _reduce_76(val, _values, result)
          result = Date.new(val[0].year * 10 ** val[2]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 204)
  def _reduce_77(val, _values, result)
          result = Date.new(val[1] * 10 ** val[3]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 208)
  def _reduce_78(val, _values, result)
          result = Date.new(-1 * val[2] * 10 ** val[4]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 213)
  def _reduce_79(val, _values, result)
     result = val[0]; result.calendar = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 219)
  def _reduce_80(val, _values, result)
          d = val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Decade.new(d)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 224)
  def _reduce_81(val, _values, result)
          d = val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Century.new(d)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 230)
  def _reduce_82(val, _values, result)
     result = val[1].choice!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 232)
  def _reduce_83(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 234)
  def _reduce_84(val, _values, result)
     result = EDTF::Set.new(val[0]).earlier!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 235)
  def _reduce_85(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2] + [val[4]]).earlier!.later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_86(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2]).earlier!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 237)
  def _reduce_87(val, _values, result)
     result = EDTF::Set.new([val[0]] + [val[2]]).earlier!.later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 238)
  def _reduce_88(val, _values, result)
     result = EDTF::Set.new(val[0] + [val[2]]).later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 239)
  def _reduce_89(val, _values, result)
     result = EDTF::Set.new(*val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 240)
  def _reduce_90(val, _values, result)
     result = EDTF::Set.new(val[0]).later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 243)
  def _reduce_91(val, _values, result)
     result = [val[0]].flatten
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 244)
  def _reduce_92(val, _values, result)
     result = val[0] + [val[2]].flatten
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_98(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 258)
  def _reduce_99(val, _values, result)
     result = Date.new(*val[0]).day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 259)
  def _reduce_100(val, _values, result)
     result = Date.new(*val[0]).month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 260)
  def _reduce_101(val, _values, result)
     result = Date.new(val[0]).year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 263)
  def _reduce_102(val, _values, result)
     result = (Date.new(val[0]).day_precision! .. Date.new(val[2]).day_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 264)
  def _reduce_103(val, _values, result)
     result = (Date.new(val[0]).month_precision! .. Date.new(val[2]).month_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 265)
  def _reduce_104(val, _values, result)
     result = (Date.new(val[0]).year_precision! .. Date.new(val[2]).year_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 271)
  def _reduce_105(val, _values, result)
          result = Date.new(val[0][0], val[2], val[4])
      result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 276)
  def _reduce_106(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.month_precision!
      result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 282)
  def _reduce_107(val, _values, result)
          result = Date.new(val[0][0], 1, val[5])
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:month)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 288)
  def _reduce_108(val, _values, result)
          result = Date.new(val[0][0], 1, 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!([:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 294)
  def _reduce_109(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 300)
  def _reduce_110(val, _values, result)
          result = Date.new(val[0], 1, val[5])
      result.unspecified!(:month)

    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.y', 307)
  def _reduce_112(val, _values, result)
     result = uoa(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 310)
  def _reduce_113(val, _values, result)
     result = val[0].year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 311)
  def _reduce_114(val, _values, result)
     result = val[0][0].month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 312)
  def _reduce_115(val, _values, result)
     result = val[0].day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 315)
  def _reduce_116(val, _values, result)
     result = uoa(Date.new(val[1]), val[0], :year)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 316)
  def _reduce_117(val, _values, result)
     result = uoa(Date.new(val[0]), val[1], :year)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 317)
  def _reduce_118(val, _values, result)
     result = uoa(uoa(Date.new(val[1]), val[0], :year), val[2], :year)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 321)
  def _reduce_119(val, _values, result)
          result = [uoa(val[0].change(:month => val[2]), val[3], [:month, :year])]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 324)
  def _reduce_120(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[3], [:year, :month])]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 327)
  def _reduce_121(val, _values, result)
            result = [uoa(Date.new(val[0], val[3]), val[2], [:month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 330)
  def _reduce_122(val, _values, result)
            result = [uoa(uoa(Date.new(val[0], val[3]), val[2], [:month]), val[4], [:year, :month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 333)
  def _reduce_123(val, _values, result)
            result = [uoa(val[0].change(:month => val[3]), val[2], [:month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 336)
  def _reduce_124(val, _values, result)
            result = [uoa(uoa(val[0].change(:month => val[3]), val[2], [:month]), val[4], [:year, :month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 342)
  def _reduce_125(val, _values, result)
          result = uoa(val[0][0].change(:day => val[2]), val[3], val[0][1] ? [:day] : nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 345)
  def _reduce_126(val, _values, result)
            result = uoa(val[0][0].change(:day => val[3]), val[2], [:day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 348)
  def _reduce_127(val, _values, result)
            result = uoa(uoa(val[0][0].change(:day => val[3]), val[2], [:day]), val[4], [:year, :month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 351)
  def _reduce_128(val, _values, result)
            result = uoa(uoa(Date.new(val[0], val[3], val[4]), val[2], :month), val[5], :day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 354)
  def _reduce_129(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[3])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 357)
  def _reduce_130(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[3]), val[2], [:day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 360)
  def _reduce_131(val, _values, result)
            result = uoa(uoa(Date.new(val[0][0], val[0][1], val[3]), val[2], [:day]), val[4], [:year, :month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 364)
  def _reduce_132(val, _values, result)
     result = []
    result
  end
.,.,

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.y', 368)
  def _reduce_134(val, _values, result)
     result = 0
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'parser.y', 374)
  def _reduce_145(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 375)
  def _reduce_146(val, _values, result)
     result = 10
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 376)
  def _reduce_147(val, _values, result)
     result = 11
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 377)
  def _reduce_148(val, _values, result)
     result = 12
    result
  end
.,.,

# reduce 149 omitted

module_eval(<<'.,.,', 'parser.y', 381)
  def _reduce_150(val, _values, result)
     result = 13
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 384)
  def _reduce_151(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 385)
  def _reduce_152(val, _values, result)
     result = 10 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 386)
  def _reduce_153(val, _values, result)
     result = 20
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 387)
  def _reduce_154(val, _values, result)
     result = 21
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 388)
  def _reduce_155(val, _values, result)
     result = 22
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 389)
  def _reduce_156(val, _values, result)
     result = 23
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'parser.y', 397)
  def _reduce_160(val, _values, result)
     result = 24
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 398)
  def _reduce_161(val, _values, result)
     result = 25
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 399)
  def _reduce_162(val, _values, result)
     result = 26
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 400)
  def _reduce_163(val, _values, result)
     result = 27
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 401)
  def _reduce_164(val, _values, result)
     result = 28
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 402)
  def _reduce_165(val, _values, result)
     result = 29
    result
  end
.,.,

# reduce 166 omitted

module_eval(<<'.,.,', 'parser.y', 406)
  def _reduce_167(val, _values, result)
     result = 30
    result
  end
.,.,

# reduce 168 omitted

module_eval(<<'.,.,', 'parser.y', 410)
  def _reduce_169(val, _values, result)
     result = 31
    result
  end
.,.,

# reduce 170 omitted

module_eval(<<'.,.,', 'parser.y', 414)
  def _reduce_171(val, _values, result)
     result = 30 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 415)
  def _reduce_172(val, _values, result)
     result = 40 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 416)
  def _reduce_173(val, _values, result)
     result = 50 + val[1]
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

module_eval(<<'.,.,', 'parser.y', 423)
  def _reduce_176(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 424)
  def _reduce_177(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 427)
  def _reduce_178(val, _values, result)
               result = val.zip([100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 431)
  def _reduce_179(val, _values, result)
               result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 435)
  def _reduce_180(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 436)
  def _reduce_181(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module EDTF
