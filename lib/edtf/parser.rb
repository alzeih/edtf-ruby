#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'strscan'

module EDTF
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 483)

  @defaults = {
    :level => 2,
    :debug => false
  }.freeze

  class << self; attr_reader :defaults; end

  attr_reader :options

  def initialize(options = {})
    @options = Parser.defaults.merge(options)
  end

  def debug?
    !!(options[:debug] || ENV['DEBUG'])
  end

  def parse(input)
    parse!(input)
  rescue => e
    warn e.message if debug?
    nil
  end

  def parse!(input)
    @yydebug = debug?
    @src = StringScanner.new(input)
    do_parse
  end

  def on_error(tid, value, stack)
    raise ArgumentError,
      "failed to parse date: unexpected '#{value}' at #{stack.inspect}"
  end

  def apply_uncertainty(date, uncertainty, scope = nil)
    uncertainty.each do |u|
      scope.nil? ? date.send(u) : date.send(u, scope)
    end
    date
  end

  alias uoa apply_uncertainty

  def next_token
    case
    when @src.eos?
      nil
    # when @src.scan(/\s+/)
      # ignore whitespace
    when @src.scan(/\(/)
      ['(', @src.matched]
    # when @src.scan(/\)\?~-/)
    #   [:PUA, [:uncertain!, :approximate!]]
    # when @src.scan(/\)\?-/)
    #   [:PUA, [:uncertain!]]
    # when @src.scan(/\)~-/)
    #   [:PUA, [:approximate!]]
    when @src.scan(/\)/)
      [')', @src.matched]
    when @src.scan(/\[/)
      ['[', @src.matched]
    when @src.scan(/\]/)
      [']', @src.matched]
    when @src.scan(/\{/)
      ['{', @src.matched]
    when @src.scan(/\}/)
      ['}', @src.matched]
    when @src.scan(/T/)
      [:T, @src.matched]
    when @src.scan(/Z/)
      [:Z, @src.matched]
    when @src.scan(/\?~/)
      [:UA, [:uncertain!, :approximate!]]
    when @src.scan(/\?/)
      [:UA, [:uncertain!]]
    when @src.scan(/~/)
      [:UA, [:approximate!]]
    when @src.scan(/open/i)
      [:OPEN, :open]
    when @src.scan(/unkn?own/i) # matches 'unkown' typo too
      [:UNKNOWN, :unknown]
    when @src.scan(/u/)
      [:U, @src.matched]
    when @src.scan(/x/i)
      [:X, @src.matched]
    when @src.scan(/y/)
      [:LONGYEAR, @src.matched]
    when @src.scan(/e/)
      [:E, @src.matched]
    when @src.scan(/\+/)
      ['+', @src.matched]
    when @src.scan(/-\(/)
      ['-(', @src.matched]
    when @src.scan(/-/)
      ['-', @src.matched]
    when @src.scan(/:/)
      [':', @src.matched]
    when @src.scan(/\//)
      ['/', @src.matched]
    when @src.scan(/\s*\.\.\s*/)
      [:DOTS, '..']
    when @src.scan(/\s*,\s*/)
      [',', ',']
    when @src.scan(/\^\w+/)
      ['^', @src.matched[1..-1]]
    when @src.scan(/\d/)
      [@src.matched, @src.matched.to_i]
    else @src.scan(/./)
      [:UNMATCHED, @src.rest]
    end
  end


# -*- racc -*-
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   134,   133,   117,    55,    54,   118,   154,    58,   219,   218,
    46,    48,    43,   153,   155,    45,   -53,    47,    46,    48,
    43,    60,   -51,    45,    56,    47,    59,    49,    50,    51,
    52,    53,    60,   139,    61,    49,    50,    51,    52,    53,
    18,    27,    58,    28,   117,    61,    42,   118,    57,    46,
    48,    43,    11,    66,    45,    67,    47,    68,    35,   176,
    36,    59,   133,    38,    69,    70,    49,    50,    51,    52,
    53,    46,    48,    43,   177,   178,    45,    58,    47,   117,
    58,   -68,   118,   165,   218,   -69,   226,   101,    49,    50,
    51,    52,    53,    46,    48,    43,    59,   137,    45,    59,
    47,   125,   266,   263,    96,   152,   109,   156,   265,    98,
    49,    50,    51,    52,    53,    27,   147,    97,   267,   157,
    42,   167,    99,    46,    48,    43,    11,   158,    45,   159,
    47,   125,   266,   263,    61,   163,   109,    38,   265,   166,
    49,    50,    51,    52,    53,    89,    42,   174,   267,    46,
    48,    43,    11,   179,    45,   188,    47,   125,   266,   263,
   189,   191,   109,    38,   265,   204,    49,    50,    51,    52,
    53,    89,    42,   230,   267,    46,    48,    43,    11,   116,
    45,   205,    47,   169,   117,   215,   202,   118,   117,    38,
   220,   118,    49,    50,    51,    52,    53,    42,   201,   203,
    46,    48,    43,    91,   221,    45,    42,    47,   223,    46,
    48,    43,    11,   224,    45,   225,    47,    49,    50,    51,
    52,    53,   117,    38,   227,   118,    49,    50,    51,    52,
    53,    42,   113,   279,    46,    48,    43,    11,   116,    45,
   240,    47,   125,   117,   124,   248,   118,   109,    38,   128,
   241,    49,    50,    51,    52,    53,    42,   247,   249,    46,
    48,    43,    11,   243,    45,   191,    47,    46,    48,    43,
   191,   252,    45,    38,    47,   269,    49,    50,    51,    52,
    53,   270,   273,   276,    49,    50,    51,    52,    53,    46,
    48,    43,   213,   277,    45,   214,    47,    46,    48,   280,
    72,   283,    45,   240,    47,   241,    49,    50,    51,    52,
    53,   284,   204,   287,    49,    50,    51,    52,    53,    46,
    48,    43,    91,   288,    45,   116,    47,    46,    48,    43,
   117,   291,    45,   118,    47,   292,    49,    50,    51,    52,
    53,   293,   298,   303,    49,    50,    51,    52,    53,    46,
    48,   191,   117,   308,    45,   118,    47,    46,    48,    43,
   256,   309,    45,   255,    47,   310,    49,    50,    51,    52,
    53,   314,   316,   317,    49,    50,    51,    52,    53,    46,
    48,   319,   260,   320,    45,   255,    47,    46,    48,    43,
   117,   321,    45,   118,    47,   324,    49,    50,    51,    52,
    53,   325,   191,   327,    49,    50,    51,    52,    53,    46,
    48,    43,    91,   328,    45,   329,    47,    46,    48,    43,
   304,   330,    45,   331,    47,   332,    49,    50,    51,    52,
    53,   335,   336,   337,    49,    50,    51,    52,    53,    46,
    48,    43,   338,   340,    45,   341,    47,    46,    48,   186,
   342,   343,    45,   nil,    47,   nil,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,    43,   nil,   nil,    45,   nil,    47,    46,    48,   nil,
   nil,   nil,    45,   nil,    47,   nil,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,   nil,   nil,   nil,    45,   nil,    47,   183,   207,   181,
   nil,   nil,   182,   nil,   184,   nil,    49,    50,    51,    52,
    53,   nil,   nil,   nil,   208,   209,   210,   211,   212,    46,
    48,    43,   nil,   nil,    45,   nil,    47,    46,    48,    43,
   nil,   nil,    45,   nil,    47,   nil,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,    43,   nil,   nil,    45,   nil,    47,    46,    48,   nil,
   nil,   nil,    45,   nil,    47,   nil,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,    43,    91,   nil,    45,   nil,    47,    46,    48,    43,
    91,   nil,    45,   nil,    47,   nil,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,    43,    91,   nil,    45,   nil,    47,    46,    48,    43,
   nil,   nil,    45,   nil,    47,   nil,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,   nil,   nil,   nil,    45,   nil,    47,    46,    48,    43,
   nil,   nil,    45,   nil,    47,   nil,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,    43,   nil,   nil,    45,   nil,    47,    46,    48,    43,
   nil,   nil,    45,   nil,    47,   nil,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,   296,   nil,   nil,    45,   nil,    47,    46,    48,   297,
   nil,   nil,    45,   nil,    47,   nil,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,   299,   nil,   nil,    45,   nil,    47,    46,    48,    43,
   nil,   nil,    45,   nil,    47,   nil,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,    43,   nil,   nil,    45,   nil,    47,    46,    48,    43,
   nil,   nil,    45,   nil,    47,   nil,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,    43,   nil,   nil,    45,   nil,    47,    46,    48,    43,
   nil,   nil,    45,   nil,    47,   nil,    49,    50,    51,    52,
    53,   nil,   nil,   nil,    49,    50,    51,    52,    53,    46,
    48,   339,   nil,   nil,    45,   nil,    47,   125,   266,   124,
   nil,   nil,   109,   nil,   265,   nil,    49,    50,    51,    52,
    53,   125,   266,   334,   267,   122,   109,   106,   265,   108,
   nil,   123,   109,   304,   125,   nil,   124,   312,   267,   109,
   nil,   128,   125,   nil,   124,   nil,   125,   109,   124,   128,
   113,   109,   172,   128,   nil,   125,   116,   124,   nil,   115,
   109,   117,   128,   123,   118,   nil,   125,   271,   124,   nil,
   125,   109,   124,   128,   125,   109,   124,   128,   125,   109,
   124,   128,   nil,   109,   nil,   128,   183,   180,   181,   193,
   195,   182,   nil,   184,   192,   125,   194,   124,   nil,   125,
   109,   124,   128,   125,   109,   124,   128,   125,   109,   124,
   128,   125,   109,   124,   128,   125,   109,   124,   128,   125,
   109,   124,   128,   nil,   109,   nil,   128,   200,   294,   198,
   nil,   125,   199,   124,   295,   200,   109,   198,   128,   nil,
   199 ]

racc_action_check = [
    65,    65,    59,     5,     1,    59,    75,    75,   132,   132,
    65,    65,    65,    75,    76,    65,    14,    65,   132,   132,
   132,    76,     5,   132,     5,   132,    75,    65,    65,    65,
    65,    65,     8,    69,    76,   132,   132,   132,   132,   132,
     0,     0,     7,     0,    69,     8,     0,    69,     7,     0,
     0,     0,     0,    16,     0,    17,     0,    18,     0,   103,
     0,     7,   131,     0,    19,    24,     0,     0,     0,     0,
     0,   131,   131,   131,   103,   103,   131,    93,   131,    97,
   140,    25,    97,    93,   216,    26,   140,    54,   131,   131,
   131,   131,   131,   216,   216,   216,    93,    68,   216,   140,
   216,   179,   179,   179,    39,    74,   179,    77,   179,    40,
   216,   216,   216,   216,   216,    70,    70,    39,   179,    79,
    70,    95,    40,    70,    70,    70,    70,    80,    70,    81,
    70,   293,   293,   293,    95,    90,   293,    70,   293,    94,
    70,    70,    70,    70,    70,    35,    35,   100,   293,    35,
    35,    35,    35,   104,    35,   112,    35,   298,   298,   298,
   113,   114,   298,    35,   298,   121,    35,    35,    35,    35,
    35,    36,    36,   153,   298,    36,    36,    36,    36,   153,
    36,   122,    36,    96,   153,   130,   119,   153,    96,    36,
   133,    96,    36,    36,    36,    36,    36,    38,   119,   119,
    38,    38,    38,    38,   134,    38,   158,    38,   137,   158,
   158,   158,   158,   138,   158,   139,   158,    38,    38,    38,
    38,    38,   116,   158,   150,   116,   158,   158,   158,   158,
   158,   159,   226,   224,   159,   159,   159,   159,   226,   159,
   160,   159,   224,   226,   224,   170,   226,   224,   159,   224,
   161,   159,   159,   159,   159,   159,   284,   170,   170,   284,
   284,   284,   284,   166,   284,   168,   284,    11,    11,    11,
   171,   173,    11,   284,    11,   180,   284,   284,   284,   284,
   284,   189,   201,   206,    11,    11,    11,    11,    11,    12,
    12,    12,   128,   215,    12,   128,    12,    28,    28,   225,
    28,   230,    28,   232,    28,   234,    12,    12,    12,    12,
    12,   236,   244,   246,    28,    28,    28,    28,    28,    42,
    42,    42,    42,   247,    42,   165,    42,    63,    63,    63,
   165,   251,    63,   165,    63,   252,    42,    42,    42,    42,
    42,   254,   261,   269,    63,    63,    63,    63,    63,    66,
    66,   272,   169,   274,    66,   169,    66,    71,    71,    71,
   177,   275,    71,   177,    71,   279,    66,    66,    66,    66,
    66,   283,   289,   290,    71,    71,    71,    71,    71,    72,
    72,   294,   178,   296,    72,   178,    72,    73,    73,    73,
   240,   297,    73,   240,    73,   303,    72,    72,    72,    72,
    72,   304,   307,   308,    73,    73,    73,    73,    73,    89,
    89,    89,    89,   309,    89,   312,    89,    91,    91,    91,
   314,   316,    91,   317,    91,   319,    89,    89,    89,    89,
    89,   324,   328,   331,    91,    91,    91,    91,    91,    92,
    92,    92,   332,   335,    92,   336,    92,   108,   108,   108,
   337,   340,   108,   nil,   108,   nil,    92,    92,    92,    92,
    92,   nil,   nil,   nil,   108,   108,   108,   108,   108,   109,
   109,   109,   nil,   nil,   109,   nil,   109,   117,   117,   nil,
   nil,   nil,   117,   nil,   117,   nil,   109,   109,   109,   109,
   109,   nil,   nil,   nil,   117,   117,   117,   117,   117,   124,
   124,   nil,   nil,   nil,   124,   nil,   124,   125,   125,   125,
   nil,   nil,   125,   nil,   125,   nil,   124,   124,   124,   124,
   124,   nil,   nil,   nil,   125,   125,   125,   125,   125,   135,
   135,   135,   nil,   nil,   135,   nil,   135,   149,   149,   149,
   nil,   nil,   149,   nil,   149,   nil,   135,   135,   135,   135,
   135,   nil,   nil,   nil,   149,   149,   149,   149,   149,   151,
   151,   151,   nil,   nil,   151,   nil,   151,   152,   152,   nil,
   nil,   nil,   152,   nil,   152,   nil,   151,   151,   151,   151,
   151,   nil,   nil,   nil,   152,   152,   152,   152,   152,   154,
   154,   154,   154,   nil,   154,   nil,   154,   155,   155,   155,
   155,   nil,   155,   nil,   155,   nil,   154,   154,   154,   154,
   154,   nil,   nil,   nil,   155,   155,   155,   155,   155,   156,
   156,   156,   156,   nil,   156,   nil,   156,   164,   164,   164,
   nil,   nil,   164,   nil,   164,   nil,   156,   156,   156,   156,
   156,   nil,   nil,   nil,   164,   164,   164,   164,   164,   227,
   227,   nil,   nil,   nil,   227,   nil,   227,   228,   228,   228,
   nil,   nil,   228,   nil,   228,   nil,   227,   227,   227,   227,
   227,   nil,   nil,   nil,   228,   228,   228,   228,   228,   229,
   229,   229,   nil,   nil,   229,   nil,   229,   242,   242,   242,
   nil,   nil,   242,   nil,   242,   nil,   229,   229,   229,   229,
   229,   nil,   nil,   nil,   242,   242,   242,   242,   242,   256,
   256,   256,   nil,   nil,   256,   nil,   256,   260,   260,   260,
   nil,   nil,   260,   nil,   260,   nil,   256,   256,   256,   256,
   256,   nil,   nil,   nil,   260,   260,   260,   260,   260,   263,
   263,   263,   nil,   nil,   263,   nil,   263,   265,   265,   265,
   nil,   nil,   265,   nil,   265,   nil,   263,   263,   263,   263,
   263,   nil,   nil,   nil,   265,   265,   265,   265,   265,   266,
   266,   266,   nil,   nil,   266,   nil,   266,   267,   267,   267,
   nil,   nil,   267,   nil,   267,   nil,   266,   266,   266,   266,
   266,   nil,   nil,   nil,   267,   267,   267,   267,   267,   281,
   281,   281,   nil,   nil,   281,   nil,   281,   282,   282,   282,
   nil,   nil,   282,   nil,   282,   nil,   281,   281,   281,   281,
   281,   nil,   nil,   nil,   282,   282,   282,   282,   282,   334,
   334,   334,   nil,   nil,   334,   nil,   334,   320,   320,   320,
   nil,   nil,   320,   nil,   320,   nil,   334,   334,   334,   334,
   334,   321,   321,   321,   320,    60,   321,    55,   321,    55,
   nil,    60,    55,   270,    60,   nil,    60,   280,   321,    60,
   nil,    60,   270,   nil,   270,   nil,   280,   270,   280,   270,
    57,   280,    98,   280,   nil,    98,    57,    98,   nil,    57,
    98,    57,    98,   167,    57,   nil,   167,   196,   167,   nil,
   196,   167,   196,   167,    61,   196,    61,   196,    99,    61,
    99,    61,   nil,    99,   nil,    99,   106,   106,   106,   115,
   115,   106,   nil,   106,   115,   123,   115,   123,   nil,   172,
   123,   172,   123,   202,   172,   202,   172,   203,   202,   203,
   202,   241,   203,   241,   203,   248,   241,   248,   241,   249,
   248,   249,   248,   nil,   249,   nil,   249,   255,   255,   255,
   nil,   273,   255,   273,   255,   118,   273,   118,   273,   nil,
   118 ]

racc_action_pointer = [
    34,     4,   nil,   nil,   nil,     1,   nil,    30,    14,   nil,
   nil,   252,   274,   nil,    -5,   nil,    49,    32,    51,    46,
   nil,   nil,   nil,   nil,    44,    81,    85,   nil,   282,   nil,
   nil,   nil,   nil,   nil,   nil,   134,   160,   nil,   185,    86,
    91,   nil,   304,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    87,   842,   nil,   874,   nil,   -15,
   849,   889,   nil,   312,   nil,    -5,   334,   nil,    91,    27,
   108,   342,   364,   372,   101,    -5,     3,    96,   nil,    94,
    99,   101,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   394,
   108,   402,   424,    65,   109,   103,   171,    62,   870,   893,
   135,   nil,   nil,    56,   139,   nil,   901,   nil,   432,   454,
   nil,   nil,   143,   154,   149,   904,   205,   462,   950,   168,
   nil,   153,   175,   910,   484,   492,   nil,   nil,   275,   nil,
   155,    56,     3,   184,   199,   514,   nil,   202,   195,   209,
    68,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   522,
   220,   544,   552,   167,   574,   582,   604,   nil,   194,   219,
   222,   232,   nil,   nil,   612,   313,   251,   881,   253,   335,
   227,   258,   914,   241,   nil,   nil,   nil,   343,   365,    86,
   261,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   263,
   nil,   nil,   nil,   nil,   nil,   nil,   885,   nil,   nil,   nil,
   nil,   270,   918,   922,   nil,   nil,   271,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   281,    78,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   227,   281,   226,   634,   642,   664,
   295,   nil,   285,   nil,   287,   nil,   283,   nil,   nil,   nil,
   373,   926,   672,   nil,   300,   nil,   301,   311,   930,   934,
   nil,   319,   323,   nil,   327,   942,   694,   nil,   nil,   nil,
   702,   328,   nil,   724,   nil,   732,   754,   762,   nil,   326,
   857,   nil,   339,   946,   323,   331,   nil,   nil,   nil,   359,
   861,   784,   792,   353,   244,   nil,   nil,   nil,   nil,   342,
   343,   nil,   nil,   116,   367,   nil,   369,   377,   142,   nil,
   nil,   nil,   nil,   378,   395,   nil,   nil,   390,   391,   401,
   nil,   nil,   409,   nil,   414,   nil,   409,   411,   nil,   408,
   822,   836,   nil,   nil,   417,   nil,   nil,   nil,   402,   nil,
   nil,   403,   425,   nil,   814,   426,   433,   438,   nil,   nil,
   434,   nil,   nil,   nil ]

racc_action_default = [
  -191,  -191,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
   -23,  -191,  -191,   -33,   -34,   -35,   -36,   -37,  -191,   -39,
   -40,   -41,   -42,   -43,  -191,   -52,   -54,   -55,  -191,   -67,
   -70,   -71,   -72,   -73,   -74,  -191,  -191,  -111,  -191,  -113,
  -114,  -115,  -191,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -191,  -191,   -79,  -191,  -117,  -191,
  -191,  -191,   -24,  -191,   -44,  -191,  -191,   -75,  -191,  -191,
  -191,   -58,  -191,  -185,  -191,    -6,    -7,    -8,   -39,  -191,
   -84,   -89,   -90,   -91,   -93,   -94,   -95,   -96,   -97,  -191,
  -191,  -191,  -191,  -191,  -191,  -191,  -191,  -191,  -191,  -191,
  -116,   344,    -9,   -10,  -191,   -13,  -191,   -30,  -191,  -191,
  -167,   -26,   -28,  -191,  -141,  -191,  -191,  -191,  -191,  -191,
   -27,   -29,  -191,  -191,  -191,  -191,  -168,  -175,  -191,  -177,
  -191,  -191,  -191,  -191,  -191,   -76,  -189,  -191,  -106,  -191,
    -6,   -50,   -51,   -52,   -53,   -54,   -56,   -57,   -61,   -59,
  -191,  -186,  -191,  -191,  -101,  -100,   -99,   -82,  -191,  -191,
    -6,    -7,   -98,   -83,  -191,  -191,  -191,  -191,  -141,  -191,
  -191,  -141,  -191,  -191,  -118,   -11,   -15,  -191,  -191,  -191,
  -191,  -162,  -163,  -164,  -165,  -160,  -166,  -161,  -120,   -47,
   -62,  -142,   -63,   -64,   -65,   -66,  -122,  -154,  -155,  -156,
  -157,  -191,  -191,  -191,  -133,   -48,  -135,  -169,  -170,  -171,
  -172,  -173,  -174,  -176,  -178,  -191,  -191,   -25,   -45,   -80,
   -46,   -81,  -190,   -38,  -191,  -191,  -191,  -191,  -187,   -77,
  -191,  -104,  -191,  -103,  -191,  -102,   -86,   -87,   -88,   -92,
  -191,  -191,  -191,  -112,  -191,  -119,  -125,  -191,  -191,  -191,
  -127,  -129,  -191,   -16,  -191,  -191,  -191,  -158,   -17,   -18,
  -191,  -191,   -31,  -191,  -179,  -191,  -191,  -191,  -184,  -191,
  -191,  -123,  -141,  -121,  -191,  -191,  -136,  -134,  -105,  -191,
  -191,   -78,  -188,   -47,  -191,   -28,   -29,  -126,  -124,  -191,
  -191,  -130,  -128,  -191,  -191,  -159,  -191,  -191,  -191,  -183,
  -180,  -181,  -182,  -191,  -191,  -110,  -132,  -141,  -191,  -191,
  -109,  -107,  -191,   -60,  -191,   -85,  -191,  -191,   -20,  -191,
  -191,  -191,   -12,   -32,  -191,   -49,  -131,  -137,  -191,  -108,
  -139,  -191,  -191,   -22,  -191,  -191,  -191,  -191,   -21,   -19,
  -191,  -138,  -140,   -14 ]

racc_goto_table = [
    73,    12,   121,   130,   190,   239,   264,    14,   135,   237,
   238,   119,     8,    65,     9,   261,     5,     7,    62,    71,
     1,   138,     2,    74,     3,    19,     4,    24,     6,    25,
    26,   253,   259,   333,   333,   257,   257,   102,   136,    92,
   171,   173,   103,    92,    73,    79,    90,   175,   168,   170,
    95,   104,   322,   105,   258,    93,   107,   323,   245,   100,
    13,   250,    15,   149,   131,   206,   132,   150,   196,    16,
    17,    64,   148,   141,   151,   114,    29,   144,    30,    31,
   185,    32,     8,    33,     9,    34,   142,   140,   236,   197,
    92,    94,    92,   164,   229,    19,   185,   146,    62,   143,
   145,   161,   110,     9,   nil,   162,   160,   nil,   nil,   244,
   187,   nil,   nil,   nil,   251,   nil,   nil,   nil,   nil,   nil,
   264,   246,   nil,   nil,   136,   264,   nil,   nil,   nil,   318,
   239,   nil,   216,   217,   nil,   315,   222,   nil,   272,   nil,
   nil,   nil,   nil,   nil,   274,   275,   nil,   264,   264,   nil,
   148,   nil,   228,   nil,   nil,    92,    92,    92,   nil,   nil,
   nil,   nil,   306,   nil,   nil,   242,   278,   233,   234,   281,
   235,   231,   232,   232,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   286,   nil,   nil,   nil,   nil,   nil,   nil,
   289,   290,   285,   nil,   nil,   nil,   nil,   326,   nil,   136,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   305,   nil,   nil,   307,   nil,   217,   nil,   nil,
   nil,   nil,   311,   nil,   nil,   nil,   nil,   nil,   197,   282,
   222,   nil,   197,   nil,   nil,   185,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   217,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   300,   301,   302,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   222,   313,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   185 ]

racc_goto_check = [
    44,    22,    25,    25,    46,    59,    67,    30,    53,    58,
    58,    23,     8,    22,     9,    14,     5,     7,    21,    43,
     1,    23,     2,    54,     3,    34,     4,    39,     6,    41,
    42,    17,    17,    20,    20,    24,    24,    10,    44,    22,
    25,    25,    11,    22,    44,    55,    55,    12,    23,    23,
     8,    13,    15,    16,    18,     7,    27,    28,    46,     7,
    29,    46,    31,    43,    22,    25,    22,    54,    23,    32,
    33,    38,    22,    40,    22,    45,    47,    30,    48,    49,
    44,    50,     8,    51,     9,    52,     5,     7,    57,    44,
    22,    62,    22,    22,    53,    34,    44,    39,    21,    41,
    42,     8,    66,     9,   nil,     5,     7,   nil,   nil,    25,
    22,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
    67,    23,   nil,   nil,    44,    67,   nil,   nil,   nil,    14,
    59,   nil,    22,    22,   nil,    58,    22,   nil,    25,   nil,
   nil,   nil,   nil,   nil,    25,    25,   nil,    67,    67,   nil,
    22,   nil,    22,   nil,   nil,    22,    22,    22,   nil,   nil,
   nil,   nil,    46,   nil,   nil,    22,    25,     8,     8,    53,
     9,     7,     7,     7,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
    25,    25,    23,   nil,   nil,   nil,   nil,    46,   nil,    44,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,    25,   nil,    22,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,    44,    22,
    22,   nil,    44,   nil,   nil,    44,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22,    22,    22,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    22,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    44 ]

racc_goto_pointer = [
   nil,    20,    22,    24,    26,    16,    28,    17,    12,    14,
   -18,   -13,   -56,    -4,  -164,  -246,    -2,  -146,  -124,   nil,
  -287,     7,     1,   -48,  -142,   -58,   nil,     1,  -241,    60,
     7,    62,    69,    70,    25,   nil,   nil,   nil,    60,    27,
     3,    29,    30,    -9,   -28,    18,  -110,    76,    78,    79,
    81,    83,    85,   -58,    -5,    10,   nil,   -70,  -149,  -154,
   nil,   nil,    53,   nil,   nil,   nil,    47,  -173,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    86,   nil,    75,    76,    77,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   254,
   268,    10,    63,   112,   111,   nil,   120,   nil,   262,   nil,
    88,   nil,   nil,   nil,    78,    20,    21,    22,    23,   nil,
   nil,    87,   nil,   nil,    44,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    80,    81,    82,    83,
    84,    85,    37,    39,    40,    41,   126,   127,   129 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 42, :_reduce_6,
  1, 42, :_reduce_7,
  1, 42, :_reduce_8,
  3, 43, :_reduce_9,
  1, 47, :_reduce_none,
  2, 47, :_reduce_11,
  5, 48, :_reduce_12,
  1, 48, :_reduce_none,
  8, 53, :_reduce_14,
  1, 49, :_reduce_15,
  2, 49, :_reduce_16,
  2, 49, :_reduce_17,
  1, 55, :_reduce_none,
  5, 55, :_reduce_19,
  3, 54, :_reduce_20,
  5, 54, :_reduce_21,
  4, 54, :_reduce_22,
  1, 44, :_reduce_none,
  2, 44, :_reduce_24,
  4, 58, :_reduce_25,
  1, 60, :_reduce_none,
  1, 62, :_reduce_none,
  3, 45, :_reduce_28,
  3, 46, :_reduce_29,
  1, 50, :_reduce_none,
  1, 51, :_reduce_none,
  1, 52, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  4, 66, :_reduce_38,
  1, 67, :_reduce_39,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 71, :_reduce_none,
  2, 71, :_reduce_44,
  4, 75, :_reduce_45,
  4, 75, :_reduce_46,
  4, 72, :_reduce_47,
  4, 73, :_reduce_48,
  7, 74, :_reduce_49,
  3, 68, :_reduce_50,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  2, 69, :_reduce_58,
  3, 69, :_reduce_59,
  5, 80, :_reduce_60,
  2, 80, :_reduce_61,
  4, 70, :_reduce_62,
  2, 82, :_reduce_63,
  2, 82, :_reduce_64,
  2, 82, :_reduce_65,
  2, 82, :_reduce_66,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  2, 84, :_reduce_75,
  3, 89, :_reduce_76,
  4, 89, :_reduce_77,
  5, 89, :_reduce_78,
  2, 88, :_reduce_79,
  4, 87, :_reduce_80,
  4, 87, :_reduce_81,
  3, 85, :_reduce_82,
  3, 86, :_reduce_83,
  1, 92, :_reduce_84,
  5, 92, :_reduce_85,
  3, 92, :_reduce_86,
  3, 92, :_reduce_87,
  3, 92, :_reduce_88,
  1, 92, :_reduce_89,
  1, 92, :_reduce_90,
  1, 94, :_reduce_91,
  3, 94, :_reduce_92,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  2, 93, :_reduce_98,
  2, 95, :_reduce_99,
  2, 95, :_reduce_100,
  2, 95, :_reduce_101,
  3, 98, :_reduce_102,
  3, 98, :_reduce_103,
  3, 98, :_reduce_104,
  5, 79, :_reduce_105,
  3, 79, :_reduce_106,
  6, 79, :_reduce_107,
  7, 79, :_reduce_108,
  6, 79, :_reduce_109,
  6, 79, :_reduce_110,
  1, 78, :_reduce_none,
  4, 78, :_reduce_112,
  1, 99, :_reduce_113,
  1, 99, :_reduce_114,
  1, 99, :_reduce_115,
  2, 100, :_reduce_116,
  2, 100, :_reduce_117,
  3, 100, :_reduce_118,
  4, 101, :_reduce_119,
  4, 101, :_reduce_120,
  5, 101, :_reduce_121,
  4, 101, :_reduce_122,
  5, 101, :_reduce_123,
  5, 101, :_reduce_124,
  4, 101, :_reduce_125,
  5, 101, :_reduce_126,
  4, 102, :_reduce_127,
  5, 102, :_reduce_128,
  4, 102, :_reduce_129,
  5, 102, :_reduce_130,
  7, 102, :_reduce_131,
  6, 102, :_reduce_132,
  4, 102, :_reduce_133,
  5, 102, :_reduce_134,
  4, 102, :_reduce_135,
  5, 102, :_reduce_136,
  7, 102, :_reduce_137,
  9, 102, :_reduce_138,
  7, 102, :_reduce_139,
  9, 102, :_reduce_140,
  0, 83, :_reduce_141,
  1, 83, :_reduce_none,
  1, 59, :_reduce_143,
  1, 59, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  2, 61, :_reduce_154,
  2, 61, :_reduce_155,
  2, 61, :_reduce_156,
  2, 61, :_reduce_157,
  1, 56, :_reduce_none,
  2, 56, :_reduce_159,
  2, 103, :_reduce_160,
  2, 103, :_reduce_161,
  2, 103, :_reduce_162,
  2, 103, :_reduce_163,
  2, 103, :_reduce_164,
  2, 103, :_reduce_165,
  2, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 104, :_reduce_none,
  2, 104, :_reduce_169,
  2, 104, :_reduce_170,
  2, 104, :_reduce_171,
  2, 104, :_reduce_172,
  2, 104, :_reduce_173,
  2, 104, :_reduce_174,
  1, 105, :_reduce_none,
  2, 105, :_reduce_176,
  1, 63, :_reduce_none,
  2, 63, :_reduce_178,
  1, 57, :_reduce_none,
  2, 57, :_reduce_180,
  2, 57, :_reduce_181,
  2, 57, :_reduce_182,
  2, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 91, :_reduce_185,
  2, 91, :_reduce_186,
  3, 91, :_reduce_187,
  4, 91, :_reduce_188,
  1, 90, :_reduce_189,
  2, 90, :_reduce_190 ]

racc_reduce_n = 191

racc_shift_n = 344

racc_token_table = {
  false => 0,
  :error => 1,
  :T => 2,
  :Z => 3,
  :E => 4,
  :X => 5,
  :U => 6,
  :UNKNOWN => 7,
  :OPEN => 8,
  :LONGYEAR => 9,
  :UNMATCHED => 10,
  :DOTS => 11,
  :UA => 12,
  :PUA => 13,
  ":" => 14,
  "2" => 15,
  "4" => 16,
  "0" => 17,
  "-" => 18,
  "+" => 19,
  "1" => 20,
  "/" => 21,
  "3" => 22,
  "^" => 23,
  "[" => 24,
  "]" => 25,
  "{" => 26,
  "}" => 27,
  "," => 28,
  "(" => 29,
  ")" => 30,
  "-(" => 31,
  "5" => 32,
  "6" => 33,
  "7" => 34,
  "8" => 35,
  "9" => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T",
  "Z",
  "E",
  "X",
  "U",
  "UNKNOWN",
  "OPEN",
  "LONGYEAR",
  "UNMATCHED",
  "DOTS",
  "UA",
  "PUA",
  "\":\"",
  "\"2\"",
  "\"4\"",
  "\"0\"",
  "\"-\"",
  "\"+\"",
  "\"1\"",
  "\"/\"",
  "\"3\"",
  "\"^\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\"-(\"",
  "\"5\"",
  "\"6\"",
  "\"7\"",
  "\"8\"",
  "\"9\"",
  "$start",
  "edtf",
  "level_0_expression",
  "level_1_expression",
  "level_2_expression",
  "date",
  "date_time",
  "year",
  "year_month",
  "year_month_day",
  "time",
  "base_time",
  "zone_offset",
  "hour",
  "minute",
  "second",
  "midnight",
  "zone_offset_hour",
  "positive_zone_offset",
  "d01_13",
  "d01_59",
  "positive_year",
  "digit",
  "month",
  "d01_12",
  "day",
  "d01_31",
  "d00_23",
  "d00_59",
  "unknown",
  "unspecified",
  "level_1_interval",
  "long_year_simple",
  "season",
  "unspecified_year",
  "unspecified_month",
  "unspecified_day",
  "unspecified_day_and_month",
  "positive_unspecified_year",
  "level_1_start",
  "level_1_end",
  "partial_uncertain_or_approximate",
  "partial_unspecified",
  "long_year",
  "positive_digit",
  "season_number",
  "ua",
  "season_qualified",
  "choice_list",
  "inclusive_list",
  "masked_precision",
  "date_and_calendar",
  "long_year_scientific",
  "integer",
  "int1_4",
  "list",
  "earlier",
  "list_elements",
  "later",
  "list_element",
  "atomic",
  "consecutives",
  "pua_base",
  "pua_year",
  "pua_year_month",
  "pua_year_month_day",
  "d01_23",
  "d01_29",
  "d01_30" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_6(val, _values, result)
     result = Date.new(val[0]).year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_7(val, _values, result)
     result = Date.new(*val.flatten).month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_8(val, _values, result)
     result = Date.new(*val.flatten).day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_9(val, _values, result)
        result = DateTime.new(val[0].year, val[0].month, val[0].day, *val[2])
    result.skip_timezone = (val[2].length == 3)

    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_11(val, _values, result)
     result = val.flatten
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_12(val, _values, result)
     result = val.values_at(0, 2, 4)
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_14(val, _values, result)
     result = [24, 0, 0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_15(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_16(val, _values, result)
     result = -1 * val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_17(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_19(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_20(val, _values, result)
     result = Rational(val[0] * 60 + val[2], 1440)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_21(val, _values, result)
     result = Rational(840, 1440)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_22(val, _values, result)
     result = Rational(val[3], 1440)
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_24(val, _values, result)
     result = -val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_25(val, _values, result)
        result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_28(val, _values, result)
     result = [val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_29(val, _values, result)
        result = val[0] << val[2]
    if result[2] > 31 || (result[2] > 30 && [2,4,6,9,11].include?(result[1])) || (result[2] > 29 && result[1] == 2)
      raise ArgumentError, "invalid date (invalid days #{result[2]} for month #{result[1]})"
    end

    result
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_38(val, _values, result)
     result = EDTF::Unknown.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_39(val, _values, result)
                    result = Date.new(val[0][0]).year_precision!
                result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_44(val, _values, result)
                         result = val[1]
                     result[0] = -result[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_45(val, _values, result)
          result = [val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }, [false,true]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_46(val, _values, result)
          result = [val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }, [true, true]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 125)
  def _reduce_47(val, _values, result)
        result = Date.new(val[0]).unspecified!(:month)
    result.precision = :month

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_48(val, _values, result)
        result = Date.new(*val[0]).unspecified!(:day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 134)
  def _reduce_49(val, _values, result)
        result = Date.new(val[0]).unspecified!([:day,:month])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 139)
  def _reduce_50(val, _values, result)
        result = Interval.new(val[0], val[2])

    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.y', 150)
  def _reduce_58(val, _values, result)
          result = Date.new(val[1])
      result.precision = :year

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 155)
  def _reduce_59(val, _values, result)
          result = Date.new(-1 * val[2])
      result.precision = :year

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_60(val, _values, result)
          result = val.zip([10000,1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_61(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_62(val, _values, result)
        result = Season.new(val[0], val[2])
    val[3].each { |ua| result.send(ua) }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_63(val, _values, result)
     result = 21
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 174)
  def _reduce_64(val, _values, result)
     result = 22
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_65(val, _values, result)
     result = 23
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_66(val, _values, result)
     result = 24
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_75(val, _values, result)
     result = val[0]; result.qualifier = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 200)
  def _reduce_76(val, _values, result)
          result = Date.new(val[0].year * 10 ** val[2]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 204)
  def _reduce_77(val, _values, result)
          result = Date.new(val[1] * 10 ** val[3]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 208)
  def _reduce_78(val, _values, result)
          result = Date.new(-1 * val[2] * 10 ** val[4]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 213)
  def _reduce_79(val, _values, result)
     result = val[0]; result.calendar = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 219)
  def _reduce_80(val, _values, result)
          d = val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Decade.new(d)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 224)
  def _reduce_81(val, _values, result)
          d = val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Century.new(d)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 230)
  def _reduce_82(val, _values, result)
     result = val[1].choice!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 232)
  def _reduce_83(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 234)
  def _reduce_84(val, _values, result)
     result = EDTF::Set.new(val[0]).earlier!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 235)
  def _reduce_85(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2] + [val[4]]).earlier!.later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_86(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2]).earlier!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 237)
  def _reduce_87(val, _values, result)
     result = EDTF::Set.new([val[0]] + [val[2]]).earlier!.later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 238)
  def _reduce_88(val, _values, result)
     result = EDTF::Set.new(val[0] + [val[2]]).later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 239)
  def _reduce_89(val, _values, result)
     result = EDTF::Set.new(*val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 240)
  def _reduce_90(val, _values, result)
     result = EDTF::Set.new(val[0]).later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 243)
  def _reduce_91(val, _values, result)
     result = [val[0]].flatten
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 244)
  def _reduce_92(val, _values, result)
     result = val[0] + [val[2]].flatten
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_98(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 258)
  def _reduce_99(val, _values, result)
     result = Date.new(*val[0]).day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 259)
  def _reduce_100(val, _values, result)
     result = Date.new(*val[0]).month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 260)
  def _reduce_101(val, _values, result)
     result = Date.new(val[0]).year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 263)
  def _reduce_102(val, _values, result)
     result = (Date.new(val[0]).day_precision! .. Date.new(val[2]).day_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 264)
  def _reduce_103(val, _values, result)
     result = (Date.new(val[0]).month_precision! .. Date.new(val[2]).month_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 265)
  def _reduce_104(val, _values, result)
     result = (Date.new(val[0]).year_precision! .. Date.new(val[2]).year_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 271)
  def _reduce_105(val, _values, result)
          result = Date.new(val[0][0], val[2], val[4])
      result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 276)
  def _reduce_106(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.month_precision!
      result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 282)
  def _reduce_107(val, _values, result)
          result = Date.new(val[0][0], 1, val[5])
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:month)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 288)
  def _reduce_108(val, _values, result)
          result = Date.new(val[0][0], 1, 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!([:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 294)
  def _reduce_109(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 300)
  def _reduce_110(val, _values, result)
          result = Date.new(val[0], 1, val[5])
      result.unspecified!(:month)

    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.y', 307)
  def _reduce_112(val, _values, result)
     result = uoa(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 310)
  def _reduce_113(val, _values, result)
     result = val[0].year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 311)
  def _reduce_114(val, _values, result)
     result = val[0][0].month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 312)
  def _reduce_115(val, _values, result)
     result = val[0].day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 315)
  def _reduce_116(val, _values, result)
     result = uoa(Date.new(val[1]), val[0], :year)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 316)
  def _reduce_117(val, _values, result)
     result = uoa(Date.new(val[0]), val[1], :year)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 317)
  def _reduce_118(val, _values, result)
     result = uoa(uoa(Date.new(val[1]), val[0], :year), val[2], :year)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 321)
  def _reduce_119(val, _values, result)
          result = [uoa(val[0].change(:month => val[2]), val[3], [:month, :year])]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 324)
  def _reduce_120(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[3], [:year, :month])]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 327)
  def _reduce_121(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[4], [:month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 330)
  def _reduce_122(val, _values, result)
            result = [uoa(Date.new(val[0], val[3]), val[2], [:month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 333)
  def _reduce_123(val, _values, result)
            result = [uoa(uoa(Date.new(val[0], val[3]), val[2], [:month]), val[4], [:year, :month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 336)
  def _reduce_124(val, _values, result)
            result = [uoa(val[0].change(:month => val[2]), val[4], [:month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 339)
  def _reduce_125(val, _values, result)
            result = [uoa(val[0].change(:month => val[3]), val[2], [:month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 342)
  def _reduce_126(val, _values, result)
            result = [uoa(uoa(val[0].change(:month => val[3]), val[2], [:month]), val[4], [:year, :month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 348)
  def _reduce_127(val, _values, result)
          result = uoa(val[0][0].change(:day => val[2]), val[3], val[0][1] ? [:day] : nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 351)
  def _reduce_128(val, _values, result)
            result = uoa(val[0][0].change(:day => val[2]), val[4], [:day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 354)
  def _reduce_129(val, _values, result)
            result = uoa(val[0][0].change(:day => val[3]), val[2], [:day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 357)
  def _reduce_130(val, _values, result)
            result = uoa(uoa(val[0][0].change(:day => val[3]), val[2], [:day]), val[4], [:year, :month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 360)
  def _reduce_131(val, _values, result)
            result = uoa(uoa(Date.new(val[0], val[2], val[5]), val[4], :month), val[6], :day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 363)
  def _reduce_132(val, _values, result)
            result = uoa(uoa(Date.new(val[0], val[3], val[4]), val[2], :month), val[5], :day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 366)
  def _reduce_133(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[3])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 369)
  def _reduce_134(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[4], [:day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 372)
  def _reduce_135(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[3]), val[2], [:day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 375)
  def _reduce_136(val, _values, result)
            result = uoa(uoa(Date.new(val[0][0], val[0][1], val[3]), val[2], [:day]), val[4], [:year, :month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 378)
  def _reduce_137(val, _values, result)
            result = uoa(Date.new(val[0], val[2], val[4]), val[6], [:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 381)
  def _reduce_138(val, _values, result)
            result = Date.new(val[0], val[2], val[4])
        result = uoa(result, val[6], [:day])
        result = uoa(result, val[8], [:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 386)
  def _reduce_139(val, _values, result)
            result = val[0].change(:month => val[2], :day => val[4])
        result = uoa(result, val[6], [:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 390)
  def _reduce_140(val, _values, result)
            result = val[0].change(:month => val[2], :day => val[4])
        result = uoa(result, val[6], [:day])
        result = uoa(result, val[8], [:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 401)
  def _reduce_141(val, _values, result)
     result = []
    result
  end
.,.,

# reduce 142 omitted

module_eval(<<'.,.,', 'parser.y', 405)
  def _reduce_143(val, _values, result)
     result = 0
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'parser.y', 411)
  def _reduce_154(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 412)
  def _reduce_155(val, _values, result)
     result = 10
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 413)
  def _reduce_156(val, _values, result)
     result = 11
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 414)
  def _reduce_157(val, _values, result)
     result = 12
    result
  end
.,.,

# reduce 158 omitted

module_eval(<<'.,.,', 'parser.y', 418)
  def _reduce_159(val, _values, result)
     result = 13
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 421)
  def _reduce_160(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 422)
  def _reduce_161(val, _values, result)
     result = 10 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 423)
  def _reduce_162(val, _values, result)
     result = 20
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 424)
  def _reduce_163(val, _values, result)
     result = 21
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 425)
  def _reduce_164(val, _values, result)
     result = 22
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 426)
  def _reduce_165(val, _values, result)
     result = 23
    result
  end
.,.,

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

module_eval(<<'.,.,', 'parser.y', 434)
  def _reduce_169(val, _values, result)
     result = 24
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 435)
  def _reduce_170(val, _values, result)
     result = 25
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 436)
  def _reduce_171(val, _values, result)
     result = 26
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 437)
  def _reduce_172(val, _values, result)
     result = 27
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 438)
  def _reduce_173(val, _values, result)
     result = 28
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 439)
  def _reduce_174(val, _values, result)
     result = 29
    result
  end
.,.,

# reduce 175 omitted

module_eval(<<'.,.,', 'parser.y', 443)
  def _reduce_176(val, _values, result)
     result = 30
    result
  end
.,.,

# reduce 177 omitted

module_eval(<<'.,.,', 'parser.y', 447)
  def _reduce_178(val, _values, result)
     result = 31
    result
  end
.,.,

# reduce 179 omitted

module_eval(<<'.,.,', 'parser.y', 451)
  def _reduce_180(val, _values, result)
     result = 30 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 452)
  def _reduce_181(val, _values, result)
     result = 40 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 453)
  def _reduce_182(val, _values, result)
     result = 50 + val[1]
    result
  end
.,.,

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'parser.y', 460)
  def _reduce_185(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 461)
  def _reduce_186(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 464)
  def _reduce_187(val, _values, result)
               result = val.zip([100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 468)
  def _reduce_188(val, _values, result)
               result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 472)
  def _reduce_189(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 473)
  def _reduce_190(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module EDTF
