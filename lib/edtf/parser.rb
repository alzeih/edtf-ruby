#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'strscan'

module EDTF
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 437)

  @defaults = {
    :level => 2,
    :debug => false
  }.freeze

  class << self; attr_reader :defaults; end

  attr_reader :options

  def initialize(options = {})
    @options = Parser.defaults.merge(options)
  end

  def debug?
    !!(options[:debug] || ENV['DEBUG'])
  end

  def parse(input)
    parse!(input)
  rescue => e
    warn e.message if debug?
    nil
  end

  def parse!(input)
    @yydebug = debug?
    @src = StringScanner.new(input)
    do_parse
  end

  def on_error(tid, value, stack)
    raise ArgumentError,
      "failed to parse date: unexpected '#{value}' at #{stack.inspect}"
  end

  def apply_uncertainty(date, uncertainty, scope = nil)
    uncertainty.each do |u|
      scope.nil? ? date.send(u) : date.send(u, scope)
    end
    date
  end

  alias uoa apply_uncertainty

  def next_token
    case
    when @src.eos?
      nil
    # when @src.scan(/\s+/)
      # ignore whitespace
    when @src.scan(/\(/)
      ['(', @src.matched]
    # when @src.scan(/\)\?~-/)
    #   [:PUA, [:uncertain!, :approximate!]]
    # when @src.scan(/\)\?-/)
    #   [:PUA, [:uncertain!]]
    # when @src.scan(/\)~-/)
    #   [:PUA, [:approximate!]]
    when @src.scan(/\)/)
      [')', @src.matched]
    when @src.scan(/\[/)
      ['[', @src.matched]
    when @src.scan(/\]/)
      [']', @src.matched]
    when @src.scan(/\{/)
      ['{', @src.matched]
    when @src.scan(/\}/)
      ['}', @src.matched]
    when @src.scan(/T/)
      [:T, @src.matched]
    when @src.scan(/Z/)
      [:Z, @src.matched]
    when @src.scan(/\?~/)
      [:UA, [:uncertain!, :approximate!]]
    when @src.scan(/\?/)
      [:UA, [:uncertain!]]
    when @src.scan(/~/)
      [:UA, [:approximate!]]
    when @src.scan(/open/i)
      [:OPEN, :open]
    when @src.scan(/unkn?own/i) # matches 'unkown' typo too
      [:UNKNOWN, :unknown]
    when @src.scan(/X/)
      [:X, @src.matched]
    when @src.scan(/y/)
      [:LONGYEAR, @src.matched]
    when @src.scan(/e/)
      [:E, @src.matched]
    when @src.scan(/\+/)
      ['+', @src.matched]
    when @src.scan(/-\(/)
      ['-(', @src.matched]
    when @src.scan(/-/)
      ['-', @src.matched]
    when @src.scan(/:/)
      [':', @src.matched]
    when @src.scan(/\//)
      ['/', @src.matched]
    when @src.scan(/\s*\.\.\s*/)
      [:DOTS, '..']
    when @src.scan(/\s*,\s*/)
      [',', ',']
    when @src.scan(/\^\w+/)
      ['^', @src.matched[1..-1]]
    when @src.scan(/\d/)
      [@src.matched, @src.matched.to_i]
    else @src.scan(/./)
      [:UNMATCHED, @src.rest]
    end
  end


# -*- racc -*-
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    18,    27,    56,    28,   112,    52,    58,   113,    55,    44,
    46,    41,    11,   -53,    43,    63,    45,    53,    34,    59,
    35,    57,   126,    37,    64,    65,    47,    48,    49,    50,
    51,    44,    46,    41,    93,   -51,    43,    54,    45,   146,
    56,    66,   165,    67,   204,   -68,   145,    94,    47,    48,
    49,    50,    51,    44,    46,    41,   166,   167,    43,    57,
    45,   102,   112,   104,   -69,   113,   105,    27,   139,    97,
    47,    48,    49,    50,    51,    44,    46,    41,    11,    86,
    43,   129,    45,    44,    46,    41,    11,   144,    43,    37,
    45,   148,    47,    48,    49,    50,    51,    37,   149,   150,
    47,    48,    49,    50,    51,    86,   151,   155,    95,    44,
    46,    41,    11,   147,    43,   158,    45,    44,    46,    41,
    58,    96,    43,    37,    45,   168,    47,    48,    49,    50,
    51,   131,   177,    59,    47,    48,    49,    50,    51,    44,
    46,    41,   112,    56,    43,   113,    45,    44,    46,   157,
    69,   178,    43,   180,    45,   192,    47,    48,    49,    50,
    51,   193,    57,   202,    47,    48,    49,    50,    51,    44,
    46,    41,    88,    56,    43,   205,    45,    44,    46,   210,
   159,   207,    43,   208,    45,   209,    47,    48,    49,    50,
    51,   214,    57,    59,    47,    48,    49,    50,    51,    44,
    46,    41,   112,   211,    43,   113,    45,    44,    46,   224,
   190,   225,    43,   227,    45,   180,    47,    48,    49,    50,
    51,   109,   189,   191,    47,    48,    49,    50,    51,    44,
    46,    41,   112,   180,    43,   113,    45,    44,    46,    41,
    88,   234,    43,   251,    45,   252,    47,    48,    49,    50,
    51,   253,   256,   259,    47,    48,    49,    50,    51,    44,
    46,    41,   112,   262,    43,   113,    45,    44,    46,    41,
   231,   224,    43,   225,    45,   263,    47,    48,    49,    50,
    51,   192,   230,   232,    47,    48,    49,    50,    51,    44,
    46,   175,   200,   266,    43,   201,    45,    44,    46,    41,
   112,   269,    43,   113,    45,   270,    47,    48,    49,    50,
    51,   275,   280,   284,    47,    48,    49,    50,    51,    44,
    46,   285,   238,   286,    43,   237,    45,    44,    46,   290,
   242,   292,    43,   237,    45,   293,    47,    48,    49,    50,
    51,   295,   296,   297,    47,    48,    49,    50,    51,   172,
   194,   170,   112,   300,   171,   113,   173,    44,    46,    41,
   301,   180,    43,   303,    45,   304,   195,   196,   197,   198,
   199,   305,   281,   306,    47,    48,    49,    50,    51,    44,
    46,    41,   307,   308,    43,   311,    45,    44,    46,    41,
   312,   313,    43,   314,    45,   316,    47,    48,    49,    50,
    51,   317,   318,   319,    47,    48,    49,    50,    51,    44,
    46,   nil,   nil,   nil,    43,   nil,    45,    44,    46,    41,
    88,   nil,    43,   nil,    45,   nil,    47,    48,    49,    50,
    51,   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,    41,    88,   nil,    43,   nil,    45,    44,    46,    41,
    88,   nil,    43,   nil,    45,   nil,    47,    48,    49,    50,
    51,   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,    41,    11,   nil,    43,   nil,    45,    44,    46,    41,
    11,   nil,    43,    37,    45,   nil,    47,    48,    49,    50,
    51,    37,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,    41,   nil,   nil,    43,   nil,    45,    44,    46,   nil,
   nil,   nil,    43,   nil,    45,   nil,    47,    48,    49,    50,
    51,   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,    41,   nil,   nil,    43,   nil,    45,    44,    46,    41,
   nil,   nil,    43,   nil,    45,   nil,    47,    48,    49,    50,
    51,   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,    41,   nil,   nil,    43,   nil,    45,    44,    46,   273,
   nil,   nil,    43,   nil,    45,   nil,    47,    48,    49,    50,
    51,   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,   274,   nil,   nil,    43,   nil,    45,    44,    46,   276,
   nil,   nil,    43,   nil,    45,   nil,    47,    48,    49,    50,
    51,   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,    41,   nil,   nil,    43,   nil,    45,    44,    46,    41,
   nil,   nil,    43,   nil,    45,   nil,    47,    48,    49,    50,
    51,   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,    41,   nil,   nil,    43,   nil,    45,    44,    46,    41,
   nil,   nil,    43,   nil,    45,   nil,    47,    48,    49,    50,
    51,   nil,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,    41,   nil,   nil,    43,   nil,    45,    44,    46,    41,
    11,   nil,    43,   nil,    45,   nil,    47,    48,    49,    50,
    51,    37,   nil,   nil,    47,    48,    49,    50,    51,    44,
    46,   315,   nil,   nil,    43,   nil,    45,   119,   248,   245,
   nil,   nil,   105,   nil,   247,   nil,    47,    48,    49,    50,
    51,   119,   248,   245,   249,   nil,   105,   nil,   247,   119,
   248,   245,   182,   184,   105,   nil,   247,   181,   249,   183,
   119,   248,   118,   nil,   nil,   105,   249,   247,   119,   248,
   310,   nil,   117,   105,   188,   247,   186,   249,   258,   187,
   nil,   119,   281,   118,   nil,   249,   105,   119,   122,   118,
   288,   119,   105,   118,   122,   nil,   105,   nil,   122,   119,
   109,   118,   nil,   119,   105,   118,   122,   nil,   105,   111,
   122,   112,   nil,   119,   113,   118,   nil,   119,   105,   118,
   122,   nil,   105,   nil,   122,   172,   169,   170,   nil,   119,
   171,   118,   173,   119,   105,   118,   122,   119,   105,   118,
   122,   119,   105,   118,   122,   119,   105,   118,   122,   119,
   105,   118,   122,   nil,   105,   nil,   122,   188,   271,   186,
   nil,   119,   187,   118,   272,   nil,   105,   nil,   122 ]

racc_action_check = [
     0,     0,     7,     0,    57,     1,     8,    57,     7,     0,
     0,     0,     0,    14,     0,    16,     0,     5,     0,     8,
     0,     7,    62,     0,    17,    18,     0,     0,     0,     0,
     0,    62,    62,    62,    38,     5,    62,     5,    62,    72,
    72,    19,    99,    24,   125,    25,    72,    38,    62,    62,
    62,    62,    62,   125,   125,   125,    99,    99,   125,    72,
   125,    53,    93,    53,    26,    93,    53,    67,    67,    52,
   125,   125,   125,   125,   125,    67,    67,    67,    67,    34,
    67,    65,    67,    34,    34,    34,    34,    71,    34,    67,
    34,    74,    67,    67,    67,    67,    67,    34,    76,    77,
    34,    34,    34,    34,    34,    35,    78,    87,    39,    35,
    35,    35,    35,    73,    35,    91,    35,    11,    11,    11,
    73,    39,    11,    35,    11,   100,    35,    35,    35,    35,
    35,    66,   108,    73,    11,    11,    11,    11,    11,    12,
    12,    12,    66,    90,    12,    66,    12,    28,    28,    90,
    28,   109,    28,   110,    28,   116,    12,    12,    12,    12,
    12,   117,    90,   124,    28,    28,    28,    28,    28,    37,
    37,    37,    37,   132,    37,   126,    37,    63,    63,   132,
    92,   129,    63,   130,    63,   131,    37,    37,    37,    37,
    37,   145,   132,    92,    63,    63,    63,    63,    63,    68,
    68,    68,   145,   142,    68,   145,    68,    69,    69,   152,
   114,   153,    69,   158,    69,   160,    68,    68,    68,    68,
    68,   210,   114,   114,    69,    69,    69,    69,    69,    70,
    70,    70,   210,   162,    70,   210,    70,    86,    86,    86,
    86,   163,    86,   169,    86,   178,    70,    70,    70,    70,
    70,   189,   202,   209,    86,    86,    86,    86,    86,    88,
    88,    88,    94,   214,    88,    94,    88,    89,    89,    89,
   161,   216,    89,   218,    89,   220,    88,    88,    88,    88,
    88,   228,   161,   161,    89,    89,    89,    89,    89,   104,
   104,   104,   122,   230,   104,   122,   104,   105,   105,   105,
   157,   234,   105,   157,   105,   236,   104,   104,   104,   104,
   104,   243,   251,   254,   105,   105,   105,   105,   105,   112,
   112,   255,   166,   258,   112,   166,   112,   118,   118,   262,
   167,   267,   118,   167,   118,   268,   112,   112,   112,   112,
   112,   271,   273,   274,   118,   118,   118,   118,   118,   119,
   119,   119,   224,   280,   119,   224,   119,   127,   127,   127,
   281,   283,   127,   284,   127,   285,   119,   119,   119,   119,
   119,   288,   290,   292,   127,   127,   127,   127,   127,   141,
   141,   141,   293,   295,   141,   300,   141,   143,   143,   143,
   304,   307,   143,   308,   143,   311,   141,   141,   141,   141,
   141,   312,   313,   316,   143,   143,   143,   143,   143,   144,
   144,   nil,   nil,   nil,   144,   nil,   144,   146,   146,   146,
   146,   nil,   146,   nil,   146,   nil,   144,   144,   144,   144,
   144,   nil,   nil,   nil,   146,   146,   146,   146,   146,   147,
   147,   147,   147,   nil,   147,   nil,   147,   148,   148,   148,
   148,   nil,   148,   nil,   148,   nil,   147,   147,   147,   147,
   147,   nil,   nil,   nil,   148,   148,   148,   148,   148,   150,
   150,   150,   150,   nil,   150,   nil,   150,   151,   151,   151,
   151,   nil,   151,   150,   151,   nil,   150,   150,   150,   150,
   150,   151,   nil,   nil,   151,   151,   151,   151,   151,   156,
   156,   156,   nil,   nil,   156,   nil,   156,   211,   211,   nil,
   nil,   nil,   211,   nil,   211,   nil,   156,   156,   156,   156,
   156,   nil,   nil,   nil,   211,   211,   211,   211,   211,   212,
   212,   212,   nil,   nil,   212,   nil,   212,   213,   213,   213,
   nil,   nil,   213,   nil,   213,   nil,   212,   212,   212,   212,
   212,   nil,   nil,   nil,   213,   213,   213,   213,   213,   226,
   226,   226,   nil,   nil,   226,   nil,   226,   238,   238,   238,
   nil,   nil,   238,   nil,   238,   nil,   226,   226,   226,   226,
   226,   nil,   nil,   nil,   238,   238,   238,   238,   238,   242,
   242,   242,   nil,   nil,   242,   nil,   242,   245,   245,   245,
   nil,   nil,   245,   nil,   245,   nil,   242,   242,   242,   242,
   242,   nil,   nil,   nil,   245,   245,   245,   245,   245,   247,
   247,   247,   nil,   nil,   247,   nil,   247,   248,   248,   248,
   nil,   nil,   248,   nil,   248,   nil,   247,   247,   247,   247,
   247,   nil,   nil,   nil,   248,   248,   248,   248,   248,   249,
   249,   249,   nil,   nil,   249,   nil,   249,   260,   260,   260,
   nil,   nil,   260,   nil,   260,   nil,   249,   249,   249,   249,
   249,   nil,   nil,   nil,   260,   260,   260,   260,   260,   261,
   261,   261,   nil,   nil,   261,   nil,   261,   263,   263,   263,
   263,   nil,   263,   nil,   263,   nil,   261,   261,   261,   261,
   261,   263,   nil,   nil,   263,   263,   263,   263,   263,   310,
   310,   310,   nil,   nil,   310,   nil,   310,   168,   168,   168,
   nil,   nil,   168,   nil,   168,   nil,   310,   310,   310,   310,
   310,   270,   270,   270,   168,   nil,   270,   nil,   270,   275,
   275,   275,   111,   111,   275,   nil,   275,   111,   270,   111,
   296,   296,   296,   nil,   nil,   296,   275,   296,   297,   297,
   297,   nil,    58,   297,   113,   297,   113,   296,   208,   113,
   nil,    58,   252,    58,   nil,   297,    58,   208,    58,   208,
   259,   252,   208,   252,   208,   nil,   252,   nil,   252,   259,
    55,   259,   nil,    59,   259,    59,   259,   nil,    59,    55,
    59,    55,   nil,    95,    55,    95,   nil,    96,    95,    96,
    95,   nil,    96,   nil,    96,   102,   102,   102,   nil,   159,
   102,   159,   102,   190,   159,   190,   159,   191,   190,   191,
   190,   225,   191,   225,   191,   231,   225,   231,   225,   232,
   231,   232,   231,   nil,   232,   nil,   232,   237,   237,   237,
   nil,   253,   237,   253,   237,   nil,   253,   nil,   253 ]

racc_action_pointer = [
    -5,     5,   nil,   nil,   nil,    15,   nil,    -9,   -11,   nil,
   nil,   103,   125,   nil,    -7,   nil,    11,     2,    20,    24,
   nil,   nil,   nil,   nil,    23,    45,    64,   nil,   133,   nil,
   nil,   nil,   nil,   nil,    69,    95,   nil,   155,    17,    91,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    69,    47,   nil,   785,   nil,   -12,   757,   779,
   nil,   nil,    17,   163,   nil,    76,   126,    61,   185,   193,
   215,    83,    29,   103,    81,   nil,    74,    72,    79,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   223,    81,   245,   253,
   132,    86,   163,    46,   246,   789,   793,   nil,   nil,    39,
   112,   nil,   801,   nil,   275,   283,   nil,   nil,   121,   146,
   142,   728,   305,   750,   193,   nil,   144,   156,   313,   335,
   nil,   nil,   276,   nil,   134,    39,   170,   343,   nil,   176,
   166,   180,   162,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   365,   199,   373,   395,   186,   403,   425,   433,   nil,
   455,   463,   192,   194,   nil,   nil,   485,   284,   202,   805,
   204,   253,   222,   212,   nil,   nil,   306,   314,   703,   230,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   228,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   240,
   809,   813,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   241,   nil,   nil,   nil,   nil,   nil,   763,   236,
   216,   493,   515,   523,   258,   nil,   254,   nil,   256,   nil,
   248,   nil,   nil,   nil,   336,   817,   545,   nil,   270,   nil,
   282,   821,   825,   nil,   290,   nil,   292,   833,   553,   nil,
   nil,   nil,   575,   298,   nil,   583,   nil,   605,   613,   635,
   nil,   296,   767,   837,   284,   292,   nil,   nil,   318,   775,
   643,   665,   312,   673,   nil,   nil,   nil,   302,   306,   nil,
   717,   328,   nil,   329,   330,   725,   nil,   nil,   nil,   nil,
   337,   355,   nil,   350,   352,   354,   nil,   nil,   366,   nil,
   367,   nil,   362,   371,   nil,   367,   736,   744,   nil,   nil,
   372,   nil,   nil,   nil,   361,   nil,   nil,   362,   377,   nil,
   695,   379,   390,   391,   nil,   nil,   387,   nil,   nil,   nil ]

racc_action_default = [
  -177,  -177,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
   -23,  -177,  -177,   -33,   -34,   -35,   -36,   -37,  -177,   -39,
   -40,   -41,   -42,   -43,  -177,   -52,   -54,   -55,  -177,   -67,
   -70,   -71,   -72,   -73,  -177,  -177,  -108,  -177,  -110,  -111,
  -112,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -177,  -177,   -78,  -177,  -113,  -177,  -177,  -177,
   -24,   -44,  -177,  -177,   -74,  -177,  -177,  -177,   -58,  -177,
  -171,  -177,    -6,    -7,    -8,   -39,  -177,   -81,   -86,   -87,
   -88,   -90,   -91,   -92,   -93,   -94,  -177,  -177,  -177,  -177,
  -177,  -177,  -177,  -177,  -177,  -177,  -177,   320,    -9,   -10,
  -177,   -13,  -177,   -30,  -177,  -177,  -153,   -26,   -28,  -177,
  -127,  -177,  -177,  -177,  -177,   -27,   -29,  -177,  -177,  -177,
  -154,  -161,  -177,  -163,  -177,  -177,  -177,   -75,  -175,  -177,
  -103,  -177,    -6,   -50,   -51,   -52,   -53,   -54,   -56,   -57,
   -61,   -59,  -177,  -172,  -177,  -177,   -98,   -97,   -96,   -79,
  -177,  -177,    -6,    -7,   -95,   -80,  -177,  -177,  -177,  -177,
  -127,  -177,  -127,  -177,   -11,   -15,  -177,  -177,  -177,  -177,
  -148,  -149,  -150,  -151,  -146,  -152,  -147,  -115,   -47,   -62,
  -128,   -63,   -64,   -65,   -66,  -140,  -141,  -142,  -143,  -177,
  -177,  -177,  -121,   -48,  -155,  -156,  -157,  -158,  -159,  -160,
  -162,  -164,  -177,   -25,   -45,   -46,  -176,   -38,  -177,  -177,
  -177,  -177,  -173,   -76,  -177,  -101,  -177,  -100,  -177,   -99,
   -83,   -84,   -85,   -89,  -177,  -177,  -177,  -109,  -177,  -114,
  -177,  -177,  -177,  -118,  -177,   -16,  -177,  -177,  -177,  -144,
   -17,   -18,  -177,  -177,   -31,  -177,  -165,  -177,  -177,  -177,
  -170,  -177,  -177,  -116,  -177,  -177,  -122,  -102,  -177,  -177,
   -77,  -174,   -47,  -177,   -28,   -29,  -117,  -177,  -177,  -119,
  -177,  -177,  -145,  -177,  -177,  -177,  -169,  -166,  -167,  -168,
  -177,  -177,  -107,  -127,  -177,  -177,  -106,  -104,  -177,   -60,
  -177,   -82,  -177,  -177,   -20,  -177,  -177,  -177,   -12,   -32,
  -177,   -49,  -120,  -123,  -177,  -105,  -125,  -177,  -177,   -22,
  -177,  -177,  -177,  -177,   -21,   -19,  -177,  -124,  -126,   -14 ]

racc_goto_table = [
    70,   179,   114,     7,    62,     8,     9,   127,   246,   221,
   222,   130,   116,   124,   223,     5,   243,    60,    14,    19,
    24,     1,    68,    71,   235,   241,    25,     2,    26,    89,
   309,   309,   239,   239,     3,   128,    76,    87,   160,   161,
    90,    70,    92,     4,     6,    98,    99,   164,   100,   162,
   163,   229,   298,   233,   125,   101,   240,   103,   299,    13,
   140,    15,   143,   141,   142,    16,    17,    61,   133,   110,
   132,    29,     8,     9,    30,    31,   174,    32,    89,    33,
    89,   156,   134,   220,   185,   136,    19,   138,   213,   152,
   174,   153,     9,   135,    60,   137,    91,   176,   106,   nil,
   nil,   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   246,   nil,   nil,   228,   nil,   246,   128,   203,   294,   206,
   nil,   nil,   291,   nil,   nil,   nil,   223,   nil,   nil,   nil,
   nil,   nil,   nil,   140,   nil,   212,   246,   246,    89,    89,
    89,   nil,   nil,   nil,   254,   255,   nil,   nil,   226,   215,
   216,   216,   217,   218,   219,   260,   nil,   nil,   nil,   nil,
   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,   264,
   nil,   nil,   nil,   nil,   302,   nil,   nil,   nil,   nil,   265,
   nil,   nil,   nil,   128,   nil,   267,   268,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   261,   206,   282,   283,   nil,   nil,
   185,   nil,   nil,   287,   185,   nil,   nil,   174,   203,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   277,
   278,   279,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   206,   289,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   174 ]

racc_goto_check = [
    44,    46,    23,     7,    22,     8,     9,    52,    66,    57,
    57,    23,    25,    25,    58,     5,    14,    21,    30,    34,
    39,     1,    43,    53,    17,    17,    41,     2,    42,    22,
    20,    20,    24,    24,     3,    44,    54,    54,    23,    23,
     7,    44,     8,     4,     6,    10,    11,    12,    13,    25,
    25,    46,    15,    46,    22,    16,    18,    27,    28,    29,
    22,    31,    22,    43,    53,    32,    33,    38,    40,    45,
     7,    47,     8,     9,    48,    49,    44,    50,    22,    51,
    22,    22,     5,    56,    44,    30,    34,    39,    52,     7,
    44,     8,     9,    41,    21,    42,    61,    22,    65,   nil,
   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    66,   nil,   nil,    25,   nil,    66,    44,    22,    14,    22,
   nil,   nil,    57,   nil,   nil,   nil,    58,   nil,   nil,   nil,
   nil,   nil,   nil,    22,   nil,    22,    66,    66,    22,    22,
    22,   nil,   nil,   nil,    25,    25,   nil,   nil,    22,     7,
     7,     7,     8,     8,     9,    52,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,    23,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,    44,   nil,    25,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,    22,    25,    25,   nil,   nil,
    44,   nil,   nil,    25,    44,   nil,   nil,    44,    22,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
    22,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    22,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    44 ]

racc_goto_pointer = [
   nil,    21,    27,    34,    43,    15,    44,     3,     5,     6,
    -8,    -7,   -52,    -5,  -152,  -223,     2,  -142,  -111,   nil,
  -266,     6,    -8,   -55,  -134,   -46,   nil,     4,  -217,    59,
    18,    61,    65,    66,    19,   nil,   nil,   nil,    56,    20,
     1,    26,    28,    -6,   -28,    14,  -109,    71,    74,    75,
    77,    79,   -56,    -5,     2,   nil,   -67,  -141,  -137,   nil,
   nil,    59,   nil,   nil,   nil,    45,  -160,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    83,   nil,    72,    73,    74,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   236,
   250,    10,    12,   108,   107,   nil,   115,   nil,   244,   nil,
    85,   nil,   nil,   nil,    75,    20,    21,    22,    23,   nil,
   nil,    84,   nil,   nil,    42,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    77,    78,    79,    80,    81,
    82,    36,    38,    39,    40,   120,   121,   123 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 41, :_reduce_6,
  1, 41, :_reduce_7,
  1, 41, :_reduce_8,
  3, 42, :_reduce_9,
  1, 46, :_reduce_none,
  2, 46, :_reduce_11,
  5, 47, :_reduce_12,
  1, 47, :_reduce_none,
  8, 52, :_reduce_14,
  1, 48, :_reduce_15,
  2, 48, :_reduce_16,
  2, 48, :_reduce_17,
  1, 54, :_reduce_none,
  5, 54, :_reduce_19,
  3, 53, :_reduce_20,
  5, 53, :_reduce_21,
  4, 53, :_reduce_22,
  1, 43, :_reduce_none,
  2, 43, :_reduce_24,
  4, 57, :_reduce_25,
  1, 59, :_reduce_none,
  1, 61, :_reduce_none,
  3, 44, :_reduce_28,
  3, 45, :_reduce_29,
  1, 49, :_reduce_none,
  1, 50, :_reduce_none,
  1, 51, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  4, 65, :_reduce_38,
  1, 66, :_reduce_39,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 70, :_reduce_none,
  2, 70, :_reduce_44,
  4, 74, :_reduce_45,
  4, 74, :_reduce_46,
  4, 71, :_reduce_47,
  4, 72, :_reduce_48,
  7, 73, :_reduce_49,
  3, 67, :_reduce_50,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  2, 68, :_reduce_58,
  3, 68, :_reduce_59,
  5, 79, :_reduce_60,
  2, 79, :_reduce_61,
  4, 69, :_reduce_62,
  2, 81, :_reduce_63,
  2, 81, :_reduce_64,
  2, 81, :_reduce_65,
  2, 81, :_reduce_66,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  2, 83, :_reduce_74,
  3, 87, :_reduce_75,
  4, 87, :_reduce_76,
  5, 87, :_reduce_77,
  2, 86, :_reduce_78,
  3, 84, :_reduce_79,
  3, 85, :_reduce_80,
  1, 90, :_reduce_81,
  5, 90, :_reduce_82,
  3, 90, :_reduce_83,
  3, 90, :_reduce_84,
  3, 90, :_reduce_85,
  1, 90, :_reduce_86,
  1, 90, :_reduce_87,
  1, 92, :_reduce_88,
  3, 92, :_reduce_89,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  2, 91, :_reduce_95,
  2, 93, :_reduce_96,
  2, 93, :_reduce_97,
  2, 93, :_reduce_98,
  3, 96, :_reduce_99,
  3, 96, :_reduce_100,
  3, 96, :_reduce_101,
  5, 78, :_reduce_102,
  3, 78, :_reduce_103,
  6, 78, :_reduce_104,
  7, 78, :_reduce_105,
  6, 78, :_reduce_106,
  6, 78, :_reduce_107,
  1, 77, :_reduce_none,
  4, 77, :_reduce_109,
  1, 97, :_reduce_110,
  1, 97, :_reduce_111,
  1, 97, :_reduce_112,
  2, 98, :_reduce_113,
  4, 99, :_reduce_114,
  4, 99, :_reduce_115,
  5, 99, :_reduce_116,
  5, 99, :_reduce_117,
  4, 100, :_reduce_118,
  5, 100, :_reduce_119,
  7, 100, :_reduce_120,
  4, 100, :_reduce_121,
  5, 100, :_reduce_122,
  7, 100, :_reduce_123,
  9, 100, :_reduce_124,
  7, 100, :_reduce_125,
  9, 100, :_reduce_126,
  0, 82, :_reduce_127,
  1, 82, :_reduce_none,
  1, 58, :_reduce_129,
  1, 58, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  2, 60, :_reduce_140,
  2, 60, :_reduce_141,
  2, 60, :_reduce_142,
  2, 60, :_reduce_143,
  1, 55, :_reduce_none,
  2, 55, :_reduce_145,
  2, 101, :_reduce_146,
  2, 101, :_reduce_147,
  2, 101, :_reduce_148,
  2, 101, :_reduce_149,
  2, 101, :_reduce_150,
  2, 101, :_reduce_151,
  2, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 102, :_reduce_none,
  2, 102, :_reduce_155,
  2, 102, :_reduce_156,
  2, 102, :_reduce_157,
  2, 102, :_reduce_158,
  2, 102, :_reduce_159,
  2, 102, :_reduce_160,
  1, 103, :_reduce_none,
  2, 103, :_reduce_162,
  1, 62, :_reduce_none,
  2, 62, :_reduce_164,
  1, 56, :_reduce_none,
  2, 56, :_reduce_166,
  2, 56, :_reduce_167,
  2, 56, :_reduce_168,
  2, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 89, :_reduce_171,
  2, 89, :_reduce_172,
  3, 89, :_reduce_173,
  4, 89, :_reduce_174,
  1, 88, :_reduce_175,
  2, 88, :_reduce_176 ]

racc_reduce_n = 177

racc_shift_n = 320

racc_token_table = {
  false => 0,
  :error => 1,
  :T => 2,
  :Z => 3,
  :E => 4,
  :X => 5,
  :UNKNOWN => 6,
  :OPEN => 7,
  :LONGYEAR => 8,
  :UNMATCHED => 9,
  :DOTS => 10,
  :UA => 11,
  :PUA => 12,
  ":" => 13,
  "2" => 14,
  "4" => 15,
  "0" => 16,
  "-" => 17,
  "+" => 18,
  "1" => 19,
  "/" => 20,
  "3" => 21,
  "^" => 22,
  "[" => 23,
  "]" => 24,
  "{" => 25,
  "}" => 26,
  "," => 27,
  "(" => 28,
  ")" => 29,
  "-(" => 30,
  "5" => 31,
  "6" => 32,
  "7" => 33,
  "8" => 34,
  "9" => 35 }

racc_nt_base = 36

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T",
  "Z",
  "E",
  "X",
  "UNKNOWN",
  "OPEN",
  "LONGYEAR",
  "UNMATCHED",
  "DOTS",
  "UA",
  "PUA",
  "\":\"",
  "\"2\"",
  "\"4\"",
  "\"0\"",
  "\"-\"",
  "\"+\"",
  "\"1\"",
  "\"/\"",
  "\"3\"",
  "\"^\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\"-(\"",
  "\"5\"",
  "\"6\"",
  "\"7\"",
  "\"8\"",
  "\"9\"",
  "$start",
  "edtf",
  "level_0_expression",
  "level_1_expression",
  "level_2_expression",
  "date",
  "date_time",
  "year",
  "year_month",
  "year_month_day",
  "time",
  "base_time",
  "zone_offset",
  "hour",
  "minute",
  "second",
  "midnight",
  "zone_offset_hour",
  "positive_zone_offset",
  "d01_13",
  "d01_59",
  "positive_year",
  "digit",
  "month",
  "d01_12",
  "day",
  "d01_31",
  "d00_23",
  "d00_59",
  "unknown",
  "unspecified",
  "level_1_interval",
  "long_year_simple",
  "season",
  "unspecified_year",
  "unspecified_month",
  "unspecified_day",
  "unspecified_day_and_month",
  "positive_unspecified_year",
  "level_1_start",
  "level_1_end",
  "partial_uncertain_or_approximate",
  "partial_unspecified",
  "long_year",
  "positive_digit",
  "season_number",
  "ua",
  "season_qualified",
  "choice_list",
  "inclusive_list",
  "date_and_calendar",
  "long_year_scientific",
  "integer",
  "int1_4",
  "list",
  "earlier",
  "list_elements",
  "later",
  "list_element",
  "atomic",
  "consecutives",
  "pua_base",
  "pua_year",
  "pua_year_month",
  "pua_year_month_day",
  "d01_23",
  "d01_29",
  "d01_30" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_6(val, _values, result)
     result = Date.new(val[0]).year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_7(val, _values, result)
     result = Date.new(*val.flatten).month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_8(val, _values, result)
     result = Date.new(*val.flatten).day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_9(val, _values, result)
        result = DateTime.new(val[0].year, val[0].month, val[0].day, *val[2])
    result.skip_timezone = (val[2].length == 3)

    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_11(val, _values, result)
     result = val.flatten
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_12(val, _values, result)
     result = val.values_at(0, 2, 4)
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_14(val, _values, result)
     result = [24, 0, 0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_15(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_16(val, _values, result)
     result = -1 * val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_17(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_19(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_20(val, _values, result)
     result = Rational(val[0] * 60 + val[2], 1440)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_21(val, _values, result)
     result = Rational(840, 1440)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_22(val, _values, result)
     result = Rational(val[3], 1440)
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_24(val, _values, result)
     result = -val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_25(val, _values, result)
        result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_28(val, _values, result)
     result = [val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_29(val, _values, result)
        result = val[0] << val[2]
    if result[2] > 31 || (result[2] > 30 && [2,4,6,9,11].include?(result[1])) || (result[2] > 29 && result[1] == 2)
      raise ArgumentError, "invalid date (invalid days #{result[2]} for month #{result[1]})"
    end

    result
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_38(val, _values, result)
     result = EDTF::Unknown.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_39(val, _values, result)
                    result = Date.new(val[0][0]).year_precision!
                result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_44(val, _values, result)
                         result = val[1]
                     result[0] = -result[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_45(val, _values, result)
          result = [val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }, [false,true]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_46(val, _values, result)
          result = [val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }, [true, true]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 125)
  def _reduce_47(val, _values, result)
        result = Date.new(val[0]).unspecified!(:month)
    result.precision = :month

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_48(val, _values, result)
        result = Date.new(*val[0]).unspecified!(:day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 134)
  def _reduce_49(val, _values, result)
        result = Date.new(val[0]).unspecified!([:day,:month])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 139)
  def _reduce_50(val, _values, result)
        result = Interval.new(val[0], val[2])

    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.y', 150)
  def _reduce_58(val, _values, result)
          result = Date.new(val[1])
      result.precision = :year

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 155)
  def _reduce_59(val, _values, result)
          result = Date.new(-1 * val[2])
      result.precision = :year

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_60(val, _values, result)
          result = val.zip([10000,1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_61(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_62(val, _values, result)
        result = Season.new(val[0], val[2])
    val[3].each { |ua| result.send(ua) }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_63(val, _values, result)
     result = 21
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 174)
  def _reduce_64(val, _values, result)
     result = 22
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_65(val, _values, result)
     result = 23
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_66(val, _values, result)
     result = 24
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.y', 193)
  def _reduce_74(val, _values, result)
     result = val[0]; result.qualifier = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 199)
  def _reduce_75(val, _values, result)
          result = Date.new(val[0].year * 10 ** val[2]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 203)
  def _reduce_76(val, _values, result)
          result = Date.new(val[1] * 10 ** val[3]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 207)
  def _reduce_77(val, _values, result)
          result = Date.new(-1 * val[2] * 10 ** val[4]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 212)
  def _reduce_78(val, _values, result)
     result = val[0]; result.calendar = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 214)
  def _reduce_79(val, _values, result)
     result = val[1].choice!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 216)
  def _reduce_80(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 218)
  def _reduce_81(val, _values, result)
     result = EDTF::Set.new(val[0]).earlier!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 219)
  def _reduce_82(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2] + [val[4]]).earlier!.later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 220)
  def _reduce_83(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2]).earlier!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 221)
  def _reduce_84(val, _values, result)
     result = EDTF::Set.new([val[0]] + [val[2]]).earlier!.later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 222)
  def _reduce_85(val, _values, result)
     result = EDTF::Set.new(val[0] + [val[2]]).later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 223)
  def _reduce_86(val, _values, result)
     result = EDTF::Set.new(*val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 224)
  def _reduce_87(val, _values, result)
     result = EDTF::Set.new(val[0]).later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 227)
  def _reduce_88(val, _values, result)
     result = [val[0]].flatten
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 228)
  def _reduce_89(val, _values, result)
     result = val[0] + [val[2]].flatten
    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

module_eval(<<'.,.,', 'parser.y', 240)
  def _reduce_95(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 242)
  def _reduce_96(val, _values, result)
     result = Date.new(*val[0]).day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 243)
  def _reduce_97(val, _values, result)
     result = Date.new(*val[0]).month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 244)
  def _reduce_98(val, _values, result)
     result = Date.new(val[0]).year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 247)
  def _reduce_99(val, _values, result)
     result = (Date.new(val[0]).day_precision! .. Date.new(val[2]).day_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 248)
  def _reduce_100(val, _values, result)
     result = (Date.new(val[0]).month_precision! .. Date.new(val[2]).month_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 249)
  def _reduce_101(val, _values, result)
     result = (Date.new(val[0]).year_precision! .. Date.new(val[2]).year_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 255)
  def _reduce_102(val, _values, result)
          result = Date.new(val[0][0], val[2], val[4])
      result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 260)
  def _reduce_103(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.month_precision!
      result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 266)
  def _reduce_104(val, _values, result)
          result = Date.new(val[0][0], 1, val[5])
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:month)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 272)
  def _reduce_105(val, _values, result)
          result = Date.new(val[0][0], 1, 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!([:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 278)
  def _reduce_106(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 284)
  def _reduce_107(val, _values, result)
          result = Date.new(val[0], 1, val[5])
      result.unspecified!(:month)

    result
  end
.,.,

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.y', 291)
  def _reduce_109(val, _values, result)
     result = uoa(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 294)
  def _reduce_110(val, _values, result)
     result = val[0].year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 295)
  def _reduce_111(val, _values, result)
     result = val[0][0].month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 296)
  def _reduce_112(val, _values, result)
     result = val[0].day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 298)
  def _reduce_113(val, _values, result)
     result = uoa(Date.new(val[0]), val[1], :year)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_114(val, _values, result)
          result = [uoa(val[0].change(:month => val[2]), val[3], [:month, :year])]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 305)
  def _reduce_115(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[3], [:year, :month])]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 308)
  def _reduce_116(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[4], [:month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 311)
  def _reduce_117(val, _values, result)
            result = [uoa(val[0].change(:month => val[2]), val[4], [:month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 317)
  def _reduce_118(val, _values, result)
          result = uoa(val[0][0].change(:day => val[2]), val[3], val[0][1] ? [:day] : nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 320)
  def _reduce_119(val, _values, result)
            result = uoa(val[0][0].change(:day => val[2]), val[4], [:day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 323)
  def _reduce_120(val, _values, result)
            result = uoa(uoa(Date.new(val[0], val[2], val[5]), val[4], :month), val[6], :day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 326)
  def _reduce_121(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[3])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 329)
  def _reduce_122(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[4], [:day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 332)
  def _reduce_123(val, _values, result)
            result = uoa(Date.new(val[0], val[2], val[4]), val[6], [:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 335)
  def _reduce_124(val, _values, result)
            result = Date.new(val[0], val[2], val[4])
        result = uoa(result, val[6], [:day])
        result = uoa(result, val[8], [:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 340)
  def _reduce_125(val, _values, result)
            result = val[0].change(:month => val[2], :day => val[4])
        result = uoa(result, val[6], [:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 344)
  def _reduce_126(val, _values, result)
            result = val[0].change(:month => val[2], :day => val[4])
        result = uoa(result, val[6], [:day])
        result = uoa(result, val[8], [:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 355)
  def _reduce_127(val, _values, result)
     result = []
    result
  end
.,.,

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.y', 359)
  def _reduce_129(val, _values, result)
     result = 0
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

module_eval(<<'.,.,', 'parser.y', 365)
  def _reduce_140(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 366)
  def _reduce_141(val, _values, result)
     result = 10
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 367)
  def _reduce_142(val, _values, result)
     result = 11
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 368)
  def _reduce_143(val, _values, result)
     result = 12
    result
  end
.,.,

# reduce 144 omitted

module_eval(<<'.,.,', 'parser.y', 372)
  def _reduce_145(val, _values, result)
     result = 13
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 375)
  def _reduce_146(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 376)
  def _reduce_147(val, _values, result)
     result = 10 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 377)
  def _reduce_148(val, _values, result)
     result = 20
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 378)
  def _reduce_149(val, _values, result)
     result = 21
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 379)
  def _reduce_150(val, _values, result)
     result = 22
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 380)
  def _reduce_151(val, _values, result)
     result = 23
    result
  end
.,.,

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'parser.y', 388)
  def _reduce_155(val, _values, result)
     result = 24
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 389)
  def _reduce_156(val, _values, result)
     result = 25
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 390)
  def _reduce_157(val, _values, result)
     result = 26
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 391)
  def _reduce_158(val, _values, result)
     result = 27
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 392)
  def _reduce_159(val, _values, result)
     result = 28
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 393)
  def _reduce_160(val, _values, result)
     result = 29
    result
  end
.,.,

# reduce 161 omitted

module_eval(<<'.,.,', 'parser.y', 397)
  def _reduce_162(val, _values, result)
     result = 30
    result
  end
.,.,

# reduce 163 omitted

module_eval(<<'.,.,', 'parser.y', 401)
  def _reduce_164(val, _values, result)
     result = 31
    result
  end
.,.,

# reduce 165 omitted

module_eval(<<'.,.,', 'parser.y', 405)
  def _reduce_166(val, _values, result)
     result = 30 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 406)
  def _reduce_167(val, _values, result)
     result = 40 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 407)
  def _reduce_168(val, _values, result)
     result = 50 + val[1]
    result
  end
.,.,

# reduce 169 omitted

# reduce 170 omitted

module_eval(<<'.,.,', 'parser.y', 414)
  def _reduce_171(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 415)
  def _reduce_172(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 418)
  def _reduce_173(val, _values, result)
               result = val.zip([100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 422)
  def _reduce_174(val, _values, result)
               result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 426)
  def _reduce_175(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 427)
  def _reduce_176(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module EDTF
